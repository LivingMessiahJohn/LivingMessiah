@page "/HealthCheck/TestLogger"
@using Microsoft.AspNetCore.Components.Authorization
@using Page = LivingMessiah.Enums.Nav
@using Microsoft.Extensions.Options;
@using LivingMessiah.Settings

<PageHeader PageEnum="Page.HealthCheckTestLogger" />

@inject ILogger<TestLogger>? Logger
@inject IToastService? Toast
@inject IConfiguration Configuration

@using static LivingMessiah.Services.Auth0

<AuthorizeView Roles="@Roles.Admin">
	<Authorized>

		<div class="card">
			<div class="card-header">Administrative Links</div>

			<ul class="list-group list-group-flush">
				<li class="list-group-item">
					<button @onclick="@(e => ButtonClickThrowException())"
									class="list-group-item list-group-item-warning">
						<b>Throw Exception</b>
						<i class="fas fa-chevron-right"></i>
					</button>
				</li>
			</ul>
			@* 
			<div class="card-body">
				<div class="card-title"><h5>Configuration</h5></div>
				<p class="p-1">
					<b>_SyncfusionLicense</b>: @_SyncfusionLicense
				</p>
			</div>
			*@
		</div>



	</Authorized>
	<NotAuthorized>
		<div class="card border-warning my-5">
			<div class="card-header">Not Authorized</div>
			<div class="card-body">
				<h5 class="">To view <b>@Page.HealthCheckTestLogger.Title</b> you need to be logged in.</h5>
				<LoginRedirectButton ReturnUrl="@Page.HealthCheckTestLogger.Index" />
			</div>
		</div>
	</NotAuthorized>
</AuthorizeView>

@code {

	/*
	string _SyncfusionLicense = string.Empty;
	protected override void OnInitialized()
	{
		try
		{
			_SyncfusionLicense = Configuration!["SyncfusionLicense"]!;
			_SyncfusionLicense = _SyncfusionLicense.Substring(0, 10);
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnInitialized));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(TestLogger)}!{nameof(ButtonClickThrowException)}");
		}
	}
	*/

	void ButtonClickThrowException()
	{
		Logger!.LogDebug("{Method}, Location: {Location}", nameof(ButtonClickThrowException), "Start");
		try
		{
			for (int i = 0; i < 10; i++)
			{
				if (i == 5)
				{
					throw new Exception("This is a demo exception");
				}
				else
				{
					Logger!.LogWarning("{Method}, i: {i}", nameof(ButtonClickThrowException), i);
				}
			}

		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(ButtonClickThrowException));
			Toast!.ShowError($"{Global.ToastShowError} {nameof(TestLogger)}!{nameof(ButtonClickThrowException)}");
		}
	}
}
