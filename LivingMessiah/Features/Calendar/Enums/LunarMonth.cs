using Ardalis.SmartEnum;
using LivingMessiah.Features.Calendar.Constants;

namespace LivingMessiah.Features.Calendar.Enums;

// YearRelationship
public enum FullNameCategory
{
	PreviousYear = 1,
	Neither = 2,
	CurrentYear = 3,
	IsAdar2 = 4
}

public abstract class LunarMonth : SmartEnum<LunarMonth>
{
	internal const string Adar2Suffix = " II";

	#region Id's
	private static class Id
	{
		// This are listed in the same order as the `region Private Instantiation`
		internal const int HeshvanPrevGregYr = 1;
		internal const int KislevPrevGregYr = 2;
		internal const int TevetPrevGregYr = 3;
		internal const int Shevat = 4;
		internal const int Adar = 5;
		internal const int Adar2 = 6;
		internal const int Nissan = 7;
		internal const int Iyar = 8;
		internal const int Sivan = 9;
		internal const int Tammuz = 10;
		internal const int Av = 11;
		internal const int Elul = 12;
		internal const int Tishri = 13;
		internal const int Heshvan = 14;
		internal const int Kislev = 15;
		internal const int Tevet = 16;
	}
	#endregion

	#region Declared Public Instances
	public static readonly LunarMonth HeshvanPrevGregYr = new HeshvanPrevGregYrMonth();
	public static readonly LunarMonth KislevPrevGregYr = new KislevPrevGregYrMonth();
	public static readonly LunarMonth TevetPrevGregYr = new TevetPrevGregYrMonth();

	public static readonly LunarMonth Nissan = new NissanMonth();
	public static readonly LunarMonth Iyar = new IyarMonth();
	public static readonly LunarMonth Sivan = new SivanMonth();
	public static readonly LunarMonth Tammuz = new TammuzMonth();
	public static readonly LunarMonth Av = new AvMonth();
	public static readonly LunarMonth Elul = new ElulMonth();
	public static readonly LunarMonth Tishri = new TishriMonth();
	public static readonly LunarMonth Shevat = new ShevatMonth();
	public static readonly LunarMonth Adar = new AdarMonth();
	public static readonly LunarMonth Adar2 = new Adar2Month();
	public static readonly LunarMonth Heshvan = new HeshvanMonth();
	public static readonly LunarMonth Kislev = new KislevMonth();
	public static readonly LunarMonth Tevet = new TevetMonth();

	private LunarMonth(string name, int value) : base(name, value) { }

	//public abstract string Icon { get; }  //"far fa-moon" 
	#endregion

	#region Extra Fields
	public abstract int BabylonianSort { get; }  // From Nisan to Adar II
	public abstract int HebrewSort { get; }  // From Nisan to Adar II
	public abstract string FullName { get; }
	public abstract string Hebrew { get; }
	public abstract string BiblicalName { get; }
	public abstract string BiblicalHebrew { get; }  // http://www.yashanet.com/library/hebrew-days-and-months.html
	public abstract string Description { get; }
	public abstract FullNameCategory MonthDuplicate { get; }
	public abstract DateTime Date { get; } // Code generated by KeyDate.tvfDateCodeGen
	public abstract CoordinateRecord CoordinateRecord { get; }
	#endregion

	#region Extra Properties

	public string FullNameCSS
	{
		get
		{
			return MonthDuplicate switch
			{
				Enums.FullNameCategory.PreviousYear => "text-success",
				Enums.FullNameCategory.CurrentYear => "text-primary",
				Enums.FullNameCategory.IsAdar2 => "text-danger",
				_ => "text-secondary"
			};
		}
	}

	public string FullNameTextDecorationCSS
	{
		get
		{
			if (this == Adar2)
			{
				if (KeyDateYear.IsPregnant == false)
				{
					return " text-black-50 text-decoration-line-through";

				}
				else
				{
					return " fw-bold text-danger ";
				}

			}
			else
			{
				return " fw-bold";
			}
		}
	}



	#endregion

	#region Private Instantiation

	private sealed class HeshvanPrevGregYrMonth : LunarMonth
	{
		public HeshvanPrevGregYrMonth() : base($"{nameof(Id.HeshvanPrevGregYr)}", Id.HeshvanPrevGregYr) { }
		public override int BabylonianSort => 0; // 0 because IsPreviousYear == true
		public override int HebrewSort => 0; // 0 because IsPreviousYear == true
		public override string Hebrew => "חשון";
		public override string BiblicalName => "Bul";
		public override string BiblicalHebrew => "בּוּל";
		public override string FullName => nameof(Id.Heshvan); // + PGY;
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.PreviousYear;
		public override DateTime Date => LunarMonthDates.HeshvanPrevGregYrMonth;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.HeshvanPrevGregYrMonth;
	}

	private sealed class KislevPrevGregYrMonth : LunarMonth
	{
		public KislevPrevGregYrMonth() : base($"{nameof(Id.KislevPrevGregYr)}", Id.KislevPrevGregYr) { }
		public override int BabylonianSort => 0; // 0 because IsPreviousYear == true
		public override int HebrewSort => 0; // 0 because IsPreviousYear == true
		public override string Hebrew => "כסלו";
		public override string BiblicalName => "9th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Kislev); // + PGY;
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.PreviousYear;
		public override DateTime Date => LunarMonthDates.KislevPrevGregYrMonth;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.KislevPrevGregYrMonth;
	}

	private sealed class TevetPrevGregYrMonth : LunarMonth
	{
		public TevetPrevGregYrMonth() : base($"{nameof(Id.TevetPrevGregYr)}", Id.TevetPrevGregYr) { }
		public override int BabylonianSort => 0; // 0 because IsPreviousYear == true
		public override int HebrewSort => 0; // 0 because IsPreviousYear == true
		public override string Hebrew => "טבת";
		public override string BiblicalName => "10th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Tevet); // + PGY;
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.PreviousYear;
		public override DateTime Date => LunarMonthDates.TevetPrevGregYrMonth;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.TevetPrevGregYrMonth;
	}

	private sealed class ShevatMonth : LunarMonth
	{
		public ShevatMonth() : base($"{nameof(Id.Shevat)}", Id.Shevat) { }
		public override int BabylonianSort => 11;
		public override int HebrewSort => 5;
		public override string Hebrew => "שבט";
		public override string BiblicalName => "11th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Shevat);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.Neither;
		public override DateTime Date => LunarMonthDates.Shevat;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Shevat;
	}

	private sealed class AdarMonth : LunarMonth
	{
		public AdarMonth() : base($"{nameof(Id.Adar)}", Id.Adar) { }
		public override int BabylonianSort => 12;
		public override int HebrewSort => 6;
		public override string Hebrew => "אדר א";
		public override string BiblicalName => "12th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Adar);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.Neither;
		public override DateTime Date => LunarMonthDates.Adar;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Adar;
	}

	/* */
	private sealed class Adar2Month : LunarMonth
	{
		public Adar2Month() : base($"{nameof(Id.Adar2)}", Id.Adar2) { }
		public override int BabylonianSort => 13;
		public override int HebrewSort => 7;
		public override string Hebrew => "אדר ב";
		public override string BiblicalName => "13th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Adar) + Adar2Suffix;
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.IsAdar2;
		public override DateTime Date => LunarMonthDates.Adar2; // if Adar2 == DateTime.MinValue then there is no Adar II in this year
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Adar2;
	}

	private sealed class NissanMonth : LunarMonth
	{
		public NissanMonth() : base($"{nameof(Id.Nissan)}", Id.Nissan) { }
		public override int BabylonianSort => 1;
		public override int HebrewSort => 8;
		public override string Hebrew => "ניסן";
		public override string BiblicalName => "Abib";
		public override string BiblicalHebrew => "הָאָבִיב";
		public override string FullName => nameof(Id.Nissan);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.Neither;
		public override DateTime Date => LunarMonthDates.Nissan;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Nissan;
	}

	private sealed class IyarMonth : LunarMonth
	{
		public IyarMonth() : base($"{nameof(Id.Iyar)}", Id.Iyar) { }
		public override int BabylonianSort => 2;
		public override int HebrewSort => 9;
		public override string Hebrew => "אייר";
		public override string BiblicalName => "Ziv";
		public override string BiblicalHebrew => "זִו";
		public override string FullName => nameof(Id.Iyar);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.Neither;
		public override DateTime Date => LunarMonthDates.Iyar;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Iyar;
	}

	private sealed class SivanMonth : LunarMonth
	{
		public SivanMonth() : base($"{nameof(Id.Sivan)}", Id.Sivan) { }
		public override int BabylonianSort => 3;
		public override int HebrewSort => 10;
		public override string Hebrew => "סיון";
		public override string BiblicalName => "3rd";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Sivan);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.Neither;
		public override DateTime Date => LunarMonthDates.Sivan;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Sivan;
	}

	private sealed class TammuzMonth : LunarMonth
	{
		public TammuzMonth() : base($"{nameof(Id.Tammuz)}", Id.Tammuz) { }
		public override int BabylonianSort => 4;
		public override int HebrewSort => 11;
		public override string Hebrew => "תמוז";
		public override string BiblicalName => "4th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Tammuz);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.Neither;
		public override DateTime Date => LunarMonthDates.Tammuz;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Tammuz;
	}

	private sealed class AvMonth : LunarMonth
	{
		public AvMonth() : base($"{nameof(Id.Av)}", Id.Av) { }
		public override int BabylonianSort => 5;
		public override int HebrewSort => 12;
		public override string Hebrew => "אב";
		public override string BiblicalName => "5th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Av);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.Neither;
		public override DateTime Date => LunarMonthDates.Av;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Av;
	}

	private sealed class ElulMonth : LunarMonth
	{
		public ElulMonth() : base($"{nameof(Id.Elul)}", Id.Elul) { }
		public override int BabylonianSort => 6;
		public override int HebrewSort => 13;
		public override string Hebrew => "אלול";
		public override string BiblicalName => "6th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Elul);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.Neither;
		public override DateTime Date => LunarMonthDates.Elul;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Elul;
	}

	private sealed class TishriMonth : LunarMonth
	{
		public TishriMonth() : base($"{nameof(Id.Tishri)}", Id.Tishri) { }
		public override int BabylonianSort => 7;
		public override int HebrewSort => 1;
		public override string Hebrew => "תשרי";
		public override string BiblicalName => "Ethanim";
		public override string BiblicalHebrew => "הָאֵתָנִים";
		public override string FullName => nameof(Id.Tishri);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.Neither;
		public override DateTime Date => LunarMonthDates.Tishri;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Tishri;
	}


	// also transliterated as Cheshvan
	private sealed class HeshvanMonth : LunarMonth
	{
		public HeshvanMonth() : base($"{nameof(Id.Heshvan)}", Id.Heshvan) { }
		public override int BabylonianSort => 8;
		public override int HebrewSort => 2;
		public override string Hebrew => "חשון";
		public override string BiblicalName => "Bul";
		public override string BiblicalHebrew => "בּוּל";
		public override string FullName => nameof(Id.Heshvan);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.CurrentYear;
		public override DateTime Date => LunarMonthDates.Heshvan;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Heshvan;
	}

	private sealed class KislevMonth : LunarMonth
	{
		public KislevMonth() : base($"{nameof(Id.Kislev)}", Id.Kislev) { }
		public override int BabylonianSort => 9;
		public override int HebrewSort => 3;
		public override string Hebrew => "כסלו";
		public override string BiblicalName => "9th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Kislev);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.CurrentYear;
		public override DateTime Date => LunarMonthDates.Kislev;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Kislev;
	}

	private sealed class TevetMonth : LunarMonth
	{
		public TevetMonth() : base($"{nameof(Id.Tevet)}", Id.Tevet) { }
		public override int BabylonianSort => 10;
		public override int HebrewSort => 4;
		public override string Hebrew => "טבת";
		public override string BiblicalName => "10th";
		public override string BiblicalHebrew => "";
		public override string FullName => nameof(Id.Tevet);
		public override string Description => String.IsNullOrEmpty(BiblicalHebrew) ? $"{BiblicalName}" : $"{BiblicalName} {BiblicalHebrew}";
		public override FullNameCategory MonthDuplicate => FullNameCategory.CurrentYear;
		public override DateTime Date => LunarMonthDates.Tevet;
		public override CoordinateRecord CoordinateRecord => LunarMonthCoordinates.Tevet;
	}
	#endregion
}

// Ignore Spelling: Nissan, Iyar, Sivan, Tammuz, Av, Elul, Tishri, Shevat, Adar, Heshvan, Kislev, Tevet, Adar2
