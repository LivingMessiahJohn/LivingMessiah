@using LivingMessiah.Helpers

@inject ILogger<PreviousOrNextButton>? Logger
@inject IJSRuntime JS
@inject IToastService? Toast


@if (Direction == Enums.Direction.Previous)
{
	@if (Section != 1)
	{
		<button type="button" class="btn btn-outline-primary btn-md @Direction.Margin"
						title="Section: @Section"
						@onclick="ButtonClick">
			<i class="@Direction.Icon"></i>
		</button>
	}
	else
	{
		<OnEdgeButton />
	}
}
else  @* Direction.Next *@
{
	@if (Section < Enums.Content.List.Count)
	{
		<button type="button" class="btn btn-outline-primary btn-md @Direction.Margin"
						title="Section: @Section"
						@onclick="ButtonClick">
			<i class="@Direction.Icon"></i>
		</button>
	}
	else
	{
		<OnEdgeButton />
	}
}

@code {
	[Parameter, EditorRequired] public int Section { get; set; }
	[Parameter, EditorRequired] public Enums.Direction Direction { get; set; }
	[Parameter, EditorRequired] public EventCallback<int> OnSectionSelected { get; set; }

	private IJSObjectReference? _jsModule;
	private DotNetObjectReference<PreviousOrNextButton>? _dotNetRef;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				_jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/keyboard.js");
				_dotNetRef = DotNetObjectReference.Create(this);
				await _jsModule.InvokeVoidAsync(JsonKeyboard.Method, _dotNetRef);
				//Logger!.LogInformation("{Method}, JSMethod: {JSMethod}", nameof(OnAfterRenderAsync), JsonKeyboard.Method);
			}
			catch (Exception ex)
			{
				Logger!.LogError(ex, "{Method}", nameof(OnAfterRenderAsync));
				Toast!.ShowError("An invalid operation occurred, contact your administrator");
			}
		}
	}

	private void ButtonClick()
	{
		//Logger!.LogInformation("{Method}, Section: {Section}", nameof(ButtonClick), Section);

		if (Direction == Enums.Direction.Previous)
		{
			OnSectionSelected.InvokeAsync(Section - 1);
		}
		else
		{
			OnSectionSelected.InvokeAsync(Section + 1);
		}
	}

	[JSInvokable]
	public void HandleArrowKey(string key)
	{
		//Logger!.LogInformation("{Method}, key: {key}, KeyboardKey: {KeyboardKey}", nameof(HandleArrowKey), key, Direction.KeyboardKey);

		if (Direction == Enums.Direction.Previous && key == Enums.Direction.Previous.KeyboardKey && Section != 1)
		{
			ButtonClick();
			return;
		}

		if (Direction == Enums.Direction.Next && key == Enums.Direction.Next.KeyboardKey && Section < Enums.Content.List.Count)
		{
			ButtonClick();
			return;
		}


	}

	public void Dispose()
	{
		if (_jsModule != null)
		{
			_jsModule.InvokeVoidAsync(JsonKeyboard.Dispose);
			_jsModule.DisposeAsync();
		}
		_dotNetRef?.Dispose();
	}

}

