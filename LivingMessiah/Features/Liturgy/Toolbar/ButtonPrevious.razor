@using LivingMessiah.Helpers

@inject ILogger<ButtonPrevious>? Logger
@inject IJSRuntime JS
@inject IToastService? Toast

@if (Section != 1)
{
	<button type="button" class="btn btn-outline-primary btn-md @Margin"
					title="Section: @Section"
					@onclick="ButtonClick">
		<i class="@Icon"></i>
	</button>
}
else
{
	<OnEdgeButton />
}

@code {
	[Parameter, EditorRequired] public int Section { get; set; }
	[Parameter, EditorRequired] public EventCallback<int> OnSectionSelected { get; set; }

	private IJSObjectReference? _jsModule;
	private DotNetObjectReference<ButtonPrevious>? _dotNetRef;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				_jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/keyboard.js");
				_dotNetRef = DotNetObjectReference.Create(this);
				await _jsModule.InvokeVoidAsync(_jsMethod, _dotNetRef);
				Logger!.LogInformation("{Method}, JSMethod: {JSMethod}", nameof(OnAfterRenderAsync), _jsMethod);
			}
			catch (Exception ex)
			{
				Logger!.LogError(ex, "{Method}", nameof(OnAfterRenderAsync));
				Toast!.ShowError("An invalid operation occurred, contact your administrator");
			}
		}
	}

	private string Icon = "fas fa-arrow-left";
	private string Margin = "ms-1";
	private const string _jsMethod = "addArrowKeyListener";
	private const string _arrow = "ArrowLeft";

	private void ButtonClick()
	{
		Logger!.LogInformation("{Method}, Section: {Section}", nameof(ButtonClick), Section);
		OnSectionSelected.InvokeAsync(Section - 1);
	}

	[JSInvokable]
		public void HandleArrowKey(string key)
	{
		Logger!.LogInformation("{Method}, key: {key}, _arrow: {Arrow}", nameof(HandleArrowKey), key, _arrow);
		if (key == _arrow && Section != 1)
		{
			ButtonClick();
		}
	}


	public void Dispose()
	{
		if (_jsModule != null)
		{
			_jsModule.InvokeVoidAsync("removeArrowKeyListener");
			_jsModule.DisposeAsync();
		}
		_dotNetRef?.Dispose();
	}

}

