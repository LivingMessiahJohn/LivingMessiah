@page "/Sukkot/Payment/{Id:int}"

@using LivingMessiah.Features.Sukkot.Data
@using LivingMessiah.Features.Sukkot.Domain
@using LivingMessiah.SecurityRoot
@using Microsoft.AspNetCore.Components.Authorization

@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject ISecurityHelper? SecurityHelper
@inject Data.IRepository? db

<PageTop />

<AuthorizeView Policy=@Auth0.Policy.Name>
	<Authorized>
		<LoadingComponent IsLoading="rs == null" TurnSpinnerOff=TurnSpinnerOff>
			@if (IsAuthorized)
			{
				<PaymentSummary RegistrationSummary="@rs" />
				<StripeCard RemainingCostFormated="@RemainingCostFormated" />
			}
			else
			{
				<p class="fs-3 bg-danger text-center text-white mt-5 mx-5">NOT Authorized to view content</p>
			}
		</LoadingComponent>
	</Authorized>
	<NotAuthorized>
		<p class="fs-5 bg-danger text-center text-white mt-5 mx-5">NOT Authorized</p>
	</NotAuthorized>
</AuthorizeView>

@code {
	[Parameter] public int Id { get; set; }

	public RegistrationSummary? rs { get; set; }
	protected bool TurnSpinnerOff = false;
	string? Email;
	protected bool IsAuthorized = false;

	protected string RemainingCostFormated = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Logger!.LogDebug("{Method}, Id: {Id}", nameof(OnInitializedAsync), Id);

		Email = await SecurityHelper!.GetEmail();
		if (String.IsNullOrEmpty(Email))
		{
			DoToastLog("Email is empty");
		}
		else
		{
			await GetById(Id);
		}
	}

	private async Task GetById(int id)
	{
		Logger!.LogDebug("{Method}, {Id}", nameof(GetById), id);

		try
		{
			rs = await db!.GetRegistrationSummary(id);
			if (rs is not null)
			{
				var (passed, errorMsg, securityOverride) = await SecurityHelper!.DoAuthentication(Email!, rs.EMail ?? "");
				if (passed)
				{
					RemainingCostFormated = rs.RemainingCost.ToString("C0");
					IsAuthorized = true;
				}
				else
				{
					DoToastLog($"Failed DoAuthentication | {errorMsg}");
				}
			}
			else
			{
				Toast!.ShowWarning("rs is null");
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(GetById));
			Toast!.ShowError("An invalid operation occurred, contact your administrator");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

	private void DoToastLog(string message)
	{
		Logger!.LogWarning("{Method} {Message}", nameof(DoToastLog), message);
		Toast!.ShowWarning(message);
	}
}