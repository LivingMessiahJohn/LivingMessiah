@using LivingMessiah.Features.Sukkot.IndexComponents
@using LivingMessiah.Features.Sukkot.RegistrationSteps.Enums
@using LivingMessiah.Features.Sukkot.NormalUser
@using LivingMessiah.Features.Sukkot.Enums
@using LivingMessiah.Features.Sukkot.RegistrationSteps.Agreement

@inject ILogger<GridContent>? Logger

@*Step 1*@
@if (ComparisonStatus == Status.NotAuthenticated && ComparisonStatus == UsersCurrentStatus)
{

	if (IsXs)
	{
		<div class="card mt-0 mb-3">
			<div class="card-body bg-light">
				<p class="lead">
					To begin registration, you need to be logged in with a Living Messiah confirmed account.
					Click <LoginRedirectButton ReturnUrl="@Pages.RegistrationSteps.Index" />
					to login with your existing Living Messiah account or, if you do not have one, you can create one.
				</p>
				<HelpGuideTogleButton />
			</div>
		</div>
	}
	else
	{
		<p class="lead">
			To begin registration, you need to be logged in with a Living Messiah confirmed account.
			Click <LoginRedirectButton ReturnUrl="@Pages.RegistrationSteps.Index" />
			to login with your existing Living Messiah account or, if you do not have one, you can create one.
		</p>
		<HelpGuideTogleButton />
	}
}

@*Step 2*@
@if (ComparisonStatus == Status.EmailNotConfirmed && ComparisonStatus == UsersCurrentStatus)
{
	if (IsXs)
	{
		<div class="card mt-0 mb-3">
			<div class="card-body bg-light">
				<p class="lead">
					You are logged in but the this email has <span class="text-warning"><u>NOT</u></span> been confirmed.
				</p>
				<CheckSpamFolderTogleButton />
			</div>
		</div>
	}
	else
	{
		<p class="lead">
			You are logged in but the this email has <span class="text-warning"><u>NOT</u></span> been confirmed.
		</p>
		<CheckSpamFolderTogleButton />
	}
}

@*Step 3*@

@if (ComparisonStatus == Status.AgreementNotSigned && ComparisonStatus == UsersCurrentStatus)
{
	<Wrapper EmailParm="@EmailParm" OnActionCompleted="ReturnedActionCompleted" />
}

@*Step 4 *@
@if (ComparisonStatus == Status.StartRegistration)
{
	if (ComparisonStatus == UsersCurrentStatus)
	{
		<div class="card mt-0 mb-3">
			<div class="card-body bg-light">
				<EntryForm Email="@EmailParm" Id="null" OnActionCompleted="ReturnedActionCompleted" />
			</div>
		</div>
	}
	
	@if (UsersCurrentStatus!.DisplayRegistrationToggleButton && CurrentStepRecord is not null)
	{
		<Toggle Email="@EmailParm" Id="@CurrentStepRecord.Id" />
	}
}

@* Step 5 *@

@if (ComparisonStatus == Status.Payment && CurrentStepRecord is not null)
{
	if (UsersCurrentStatus == Status.Payment)
	{
		if (IsXs)
		{
			<div class="card mt-0 mb-3">
				<div class="card-body bg-light">
					<PartlyPaidParagraph CurrentStepRecord="CurrentStepRecord" />
				</div>
			</div>
		}
		else
		{
			<PartlyPaidParagraph CurrentStepRecord="CurrentStepRecord" />
		}
	}
}

@*Step 6 *@

@if (ComparisonStatus == Status.Complete && CurrentStepRecord is not null)
{
	if (UsersCurrentStatus == Status.Complete)
	{
		<CompleteParagraph CurrentStepRecordId="@CurrentStepRecord.Id" />
	}
}

@code {
	[Parameter, EditorRequired]	public bool IsXs { get; set; }
	[Parameter, EditorRequired]	public Status? UsersCurrentStatus { get; set; }
	[Parameter, EditorRequired]	public Status? ComparisonStatus { get; set; }
	[Parameter, EditorRequired]	public string? EmailParm { get; set; }
	[Parameter, EditorRequired]	public CurrentStepRecord? CurrentStepRecord { get; set; }
	[Parameter, EditorRequired] public EventCallback<Status> OnActionCompleted { get; set; }


	private void ReturnedActionCompleted(Status nextStatus)
	{
		Logger!.LogDebug("{Method}, nextStatus: {Status}", nameof(ReturnedActionCompleted), nextStatus);
		OnActionCompleted.InvokeAsync(nextStatus);
	}
}
