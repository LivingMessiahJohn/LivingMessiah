@using LivingMessiah.Features.Sukkot.LandingPage
@using LivingMessiah.Features.Sukkot.RegistrationSteps.Enums

@inject ILogger<Grid>? Logger

@if (IsXs)
{
	<div class="row my-2 pt-2 border-top">
		<div class="col-3">
			<p class="lead text-warning text-center"> Step @ComparisonStatus!.StepNumber</p>
			@((MarkupString)MarkupLiterals.Col_2nd_CheckIcon(UsersCurrentStatus!, ComparisonStatus, IsXs))
		</div>
		<div class="col-9">

			@((MarkupString)MarkupLiterals.Col_3rd_Heading(ComparisonStatus, ""))

			@((MarkupString)MarkupLiterals.Col_3rd_SubHeading(UsersCurrentStatus!, ComparisonStatus))
		</div>
	</div>

	<div class="row my-1 pl-3">
		<div class="col-12">
			<GridContent IsXs="IsXs"
									 ComparisonStatus="@ComparisonStatus"
									 UsersCurrentStatus="@UsersCurrentStatus"
									 EmailParm="@EmailParm"
									 CurrentStepRecord="@CurrentStepRecord" 
									 OnActionCompleted="ReturnedActionCompleted">
			</GridContent>
		</div>
	</div>
}
else
{
	<div class="row my-2 pt-2 border-top">
		<div class="col-sm-1">
			<i class="fa-2x">@ComparisonStatus!.StepNumber</i>
		</div>

		<div class="col-sm-1">
			@((MarkupString)MarkupLiterals.Col_2nd_CheckIcon(UsersCurrentStatus!, ComparisonStatus, IsXs))
		</div>

		<div class="col-sm-10">

			@((MarkupString)MarkupLiterals.Col_3rd_Heading(ComparisonStatus, ""))

			@((MarkupString)MarkupLiterals.Col_3rd_SubHeading(UsersCurrentStatus!, ComparisonStatus))

			<GridContent IsXs="IsXs"
									 ComparisonStatus="@ComparisonStatus"
									 UsersCurrentStatus="@UsersCurrentStatus"
									 EmailParm="@EmailParm"
									 CurrentStepRecord="@CurrentStepRecord"
									 OnActionCompleted="ReturnedActionCompleted">
			</GridContent>

		</div>

	</div>
}

@code {
	[Parameter, EditorRequired] public string? EmailParm { get; set; }
	[Parameter, EditorRequired] public bool IsXs { get; set; }
	[Parameter, EditorRequired] public Status? UsersCurrentStatus { get; set; }
	[Parameter, EditorRequired] public Status? ComparisonStatus { get; set; }
	[Parameter, EditorRequired] public CurrentStepRecord? CurrentStepRecord { get; set; }
	[Parameter, EditorRequired] public EventCallback<Status> OnActionCompleted { get; set; }

	private void ReturnedActionCompleted(Status nextStatus)
	{
		Logger!.LogDebug("{Method}, nextStatus: {Status}", nameof(ReturnedActionCompleted), nextStatus);
		OnActionCompleted.InvokeAsync(nextStatus);
	}

}
