@page "/Sukkot/RegistrationSteps"
@page "/Sukkot/RegistrationShell"

@using LivingMessiah.Features.Sukkot.Components
@using LivingMessiah.Features.Sukkot.Constants
@using LivingMessiah.Features.Sukkot.Enums
@using LivingMessiah.Features.Sukkot.NormalUser
@using LivingMessiah.Features.Sukkot.RegistrationSteps.Agreement
@using LivingMessiah.Features.Sukkot.RegistrationSteps.NotAuthorized
@using LivingMessiah.Features.Sukkot.RegistrationSteps.PaymentStep
@using LivingMessiah.SecurityRoot
@using Microsoft.AspNetCore.Components.Authorization

@inject ISecurityHelper? SecurityHelper
@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject Data.IRepository? db

<LifeCycleAuthority>
  <OpenContent>

    <PageTop TextColor="@GetTextColor()" />
    <AuthorizeView Policy=@Auth0.Policy.Name>
      <Authorized>

        @if (CurrentStep is not null)
        {
          <HeaderRow CurrentStep="CurrentStep" />
          <p class="text-center fs-5 py-2 mb-0 @StepConstants.Border @CurrentStep.CardBodyCSS">
            <b>Step:</b> @CurrentStep.Value
            @* <i class="@CurrentStep).Icon"></i> *@
            @CurrentStep.Heading
          </p>
        }
        @if (CurrentStep == Step.SignAgreement)
        {
          <div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
            <div class="card-body @CurrentStep!.CardBodyCSS">
              <HRAWrapper EmailParm="@Email" OnActionCompleted="ReturnedHraActionCompleted" />
            </div>
          </div>
        }

        <LoadingComponent IsLoading="vw == null" TurnSpinnerOff=TurnSpinnerOff>

          @* <DebugShowStepEnum UsersCurrentStep="vm!.Step" /> *@

          <StepSkeleton CurrentStep="Step.FromValue(vm!.Step!.Value)">

            <RegistrationFormRF>
              @if (@vm.Step == Step.Registration)
              {
                <div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
                  <div class="card-body @CurrentStep!.CardBodyCSS">
                    <EntryForm Email="@Email" Id="null"
                               CurrentStep="CurrentStep"
                               OnAddCompleted="ReturnedRegistrationAddCompleted" />
                  </div>
                </div>
              }
            </RegistrationFormRF>

            <PaymentRF>
              @if (@vm.Step == Step.Payment && CurrentRegistrationId != 0)
              {
                <div class="card my-2 @CurrentStep!.CardBodyCSS">
                  <div class="card-body">
                    <p class="fs-5 text-center">
                      We are currently using <b>Stripe Payment Links</b> for processing Living Messiah Ministry Sukkot donations.
                      <br /><br />
                      Click the <span class="text-success">button</span> below to proceed to the payment page.
                    </p>
                  </div>
                  <div class="card-body">
                    <StripeCard RegistrationFee="CurrentRegistrationFee"
                                Email="@vm.EmailAddress"
                                RegistrationId="CurrentRegistrationId" />
                  </div>

                  <div class="card-body">
                    <AlternativePaymentsToggle Id="CurrentRegistrationId" />
                  </div>
                </div>
              }
            </PaymentRF>

            <CompleteRF>
              @if (@vm.Step == Step.Complete)
              {
                <div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
                  <div class="card-body">
                    <CompleteParagraph Id="CurrentRegistrationId" />
                  </div>
                </div>
              }
            </CompleteRF>

          </StepSkeleton>

          @if (CurrentRegistrationId != 0)
          {
            <PrintButton Id="CurrentRegistrationId" />

            <UpdateRegistrationToggle Email="@Email"
                                      Id="CurrentRegistrationId"
                                      CurrentStep="CurrentStep"
                                      OnUpdateCompleted="ReturnedRegistrationUpdateCompleted" />

          }

        </LoadingComponent>

      </Authorized>
      <NotAuthorized>
        <NoEmailOrNotVerified Email="@Email" />
      </NotAuthorized>
    </AuthorizeView>
  </OpenContent>
</LifeCycleAuthority>

@code {

  protected Step? CurrentStep;
  protected RegistrationFee? CurrentRegistrationFee;
  protected int CurrentRegistrationId = 0;

  protected bool TurnSpinnerOff = false;
  string? Email;
  protected Domain.vwRegistrationStep? vw;
  IndexVM? vm { get; set; } = new IndexVM();

  protected override async Task OnInitializedAsync()
  {
    //Logger!.LogDebug("{Method}", nameof(OnInitializedAsync));
    Email = await SecurityHelper!.GetEmail();

    if (String.IsNullOrEmpty(Email))
    {
      Logger!.LogDebug("{Method} Email is null or Empty", nameof(OnInitializedAsync));
    }
    else
    {
      vm!.EmailAddress = Email;
      await ProcessRegistrationStep();
    }
  }

  private async Task ProcessRegistrationStep()
  {
    //Logger!.LogDebug("{Method}", nameof(ProcessRegistrationStep));
    try
    {
      vw = await db!.GetByEmail(vm!.EmailAddress!);
      if (vw is not null)
      {
        vm!.HouseRulesAgreement = new HRARecord(vw.Id, vw.HouseRulesAgreementAcceptedDate, vw.HouseRulesAgreementTimeZone);

        if (vw.RegistrationId is not null)
        {
          vm!.RegistrationId = (int)vw.RegistrationId;
          vm!.Step = Step.FromValue((int)vw.StepId!);
          vm.Adults = vw.Adults ?? 0; // this can't be null if there is a RegistrationId
          vm.FeeEnumValue = (int)vw.FeeEnumValue!; // this can't be null if there is a RegistrationId
          CurrentRegistrationId = vm!.RegistrationId;
          CurrentStep = vm!.Step;
          CurrentRegistrationFee = RegistrationFee.FromValue(vm.FeeEnumValue);
        }
        else
        {
          vm!.Step = Step.Registration;
          CurrentStep = Step.FromValue(vm.Step!.Value);
          //CurrentRegistrationId = 0;  //ToDo: review.
        }
      }
      else
      {
        vm!.Step = Step.SignAgreement;
        CurrentStep = Step.FromValue(vm.Step!.Value);
      }

      Logger!.LogInformation("{Method} {Status} {Step}", nameof(ProcessRegistrationStep), vm.Step, CurrentStep);
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(ProcessRegistrationStep));
      Toast!.ShowError("An invalid operation occurred, contact your administrator");
    }
    finally
    {
      TurnSpinnerOff = true;
    }
  }

  private async Task ReturnedHraActionCompleted(Step nextStep)
  {
    CurrentStep = nextStep;
    await ProcessRegistrationStep();
  }

  private async Task ReturnedRegistrationAddCompleted(StepAndRegFee nextStepRegFee)
  {
    //Logger!.LogDebug("{Method}, {Step}", nameof(ReturnedActionCompleted), nextStep);
    CurrentStep = nextStepRegFee.Step;
    CurrentRegistrationFee = nextStepRegFee.RegistrationFee;
    await ProcessRegistrationStep();
  }

  private async Task ReturnedRegistrationUpdateCompleted(int adults)
  {
    //Logger!.LogDebug("{Method}, {Step}", nameof(ReturnedActionCompleted), nextStep);
    CurrentRegistrationFee = RegistrationFeeHelper.AdultsToRegistrationFee(adults);
    await ProcessRegistrationStep();
  }

  private string @GetTextColor()
  {
    // ToDo: this doesn't work if there is an Email, but it has not been verified.
    return !String.IsNullOrEmpty(Email) ? " text-black" : " text-black-50";
  }

}

