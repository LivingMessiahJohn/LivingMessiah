@page "/Sukkot/RegistrationSteps"
@page "/Sukkot/RegistrationShell"

@using Microsoft.AspNetCore.Components.Authorization
@using LivingMessiah.Features.Sukkot.NormalUser
@using LivingMessiah.Features.Sukkot.RegistrationSteps.Enums
@using LivingMessiah.Features.Sukkot.RegistrationSteps.NotAuthorized
@using LivingMessiah.Features.Sukkot.RegistrationSteps.Agreement
@using LivingMessiah.SecurityRoot

@inject ISecurityHelper? SecurityHelper
@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject Data.IRepository? db

<PageTop TextColor="@GetTextColor()" />

<AuthorizeView Policy=@Auth0.Policy.Name>
	<Authorized>

		@if (CurrentStep is not null)
		{
			<HeaderRow CurrentStep="CurrentStep" />

			<p class="text-center fs-5 py-2 mb-0 @StepConstants.Border @CurrentStep.CardBodyCSS">
				<b>Step:</b> @CurrentStep.Value
				<i class="@CurrentStep).Icon"></i>
				@CurrentStep.Heading
			</p>
		}

		@if (CurrentStep == Step.SignAgreement)
		{
			<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
				<div class="card-body @CurrentStep!.CardBodyCSS">
					<HRAWrapper EmailParm="@Email" OnActionCompleted="ReturnedActionCompleted" />
				</div>
			</div>
		}

		<LoadingComponent IsLoading="vw == null" TurnSpinnerOff=TurnSpinnerOff>

			@* <DebugShowStepEnum UsersCurrentStep="vm!.Step" /> *@

			<StepSkeleton CurrentStep="Step.FromValue(vm!.Step!.Value)">

				<RegistrationFormRF>
					@if (@vm.Step == Step.Registration)
					{
						<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
							<div class="card-body @CurrentStep!.CardBodyCSS">
								<EntryForm Email="@Email" Id="null"
													 OnActionCompleted="ReturnedActionCompleted" />
							</div>
						</div>

						@if (vm.Step!.EnableRegistrationToggleButton && vm.CurrentStepRecord is not null)
						{
							<Toggle Email="@Email" Id="@vm.CurrentStepRecord!.Id" />
						}
					}
				</RegistrationFormRF>

				<PaymentRF>
					@if (@vm.Step == Step.Payment && vm.CurrentStepRecord is not null)
					{
						<div class="@MediaQuery.Xs.DivClass">
							<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
								<div class="card-body">
									<PartlyPaidParagraph CurrentStepRecord="vm.CurrentStepRecord" />
								</div>
							</div>
						</div>
						<div class="@MediaQuery.SmOrMdOrLgOrXl.DivClass">
							<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
								<div class="card-body">
									<PartlyPaidParagraph CurrentStepRecord="vm.CurrentStepRecord" />
								</div>
							</div>
						</div>
					}
				</PaymentRF>

				<CompleteRF>
					@if (@vm.Step == Step.Complete)
					{
						<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
							<div class="card-body">
								<CompleteParagraph CurrentStepRecordId="@vm.CurrentStepRecord!.Id" />
							</div>
						</div>
					}
				</CompleteRF>

			</StepSkeleton>

			@* "Footer" *@
			@if (vm.CurrentStepRecord is not null)
			{
				<Toggle Email="@Email" Id="vm.CurrentStepRecord.Id" />
			}
			else
			{
				<Toggle Email="@Email" Id="null" />
			}

	</LoadingComponent>

	</Authorized>
	<NotAuthorized>
		<NoEmailOrNotVerified Email="@Email" />
	</NotAuthorized>
</AuthorizeView>

@code {

	protected Step? CurrentStep;

	protected bool TurnSpinnerOff = false;
	string? Email;
	protected Domain.vwRegistrationStep? vw;
	IndexVM? vm { get; set; } = new IndexVM();

	protected override async Task OnInitializedAsync()
	{
		Logger!.LogDebug("{Method}", nameof(OnInitializedAsync));
		Email = await SecurityHelper!.GetEmail();

		if (String.IsNullOrEmpty(Email))
		{
			Logger!.LogDebug("{Method} Email is null or Empty", nameof(OnInitializedAsync));
		}
		else
		{
			vm!.EmailAddress = Email;
			await ProcessRegistrationStep();
		}
	}

	private async Task ProcessRegistrationStep()
	{
		Logger!.LogDebug("{Method}", nameof(ProcessRegistrationStep));
		try
		{
			vw = await db!.GetByEmail(vm!.EmailAddress!);
			if (vw is not null)
			{
				vm!.HouseRulesAgreement = new HRARecord(vw.Id, vw.HouseRulesAgreementAcceptedDate, vw.HouseRulesAgreementTimeZone);

				if (vw.RegistrationId is not null)
				{
					vm!.CurrentStepRecord = new CurrentStepRecord(
						(int)vw.RegistrationId, vw.FirstName, vw.FamilyName, vw.TotalDonation, vw.RegistrationFeeAdjusted);
					vm!.Step = Step.FromValue((int)vw.StepId!);
					CurrentStep = vm!.Step;
				}
				else
				{
					vm!.Step = Step.Registration;
					CurrentStep = Step.FromValue(vm.Step!.Value);
				}
			}
			else
			{
				vm!.Step = Step.SignAgreement;
				CurrentStep = Step.FromValue(vm.Step!.Value);
			}

			Logger!.LogInformation("{Method} {Status} {Step}", nameof(ProcessRegistrationStep), vm.Step, CurrentStep);
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(ProcessRegistrationStep));
			Toast!.ShowError("An invalid operation occurred, contact your administrator");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

	private async Task ReturnedActionCompleted(Step nextStep)
	{
		Logger!.LogDebug("{Method}, {Step}", nameof(ReturnedActionCompleted), nextStep);
		CurrentStep = nextStep;
		await ProcessRegistrationStep();
	}

	private string @GetTextColor()
	{
		// ToDo: this doesn't work if there is an Email, but it has not been verified.
		return !String.IsNullOrEmpty(Email) ? " text-black" : " text-black-50";
	}

}

