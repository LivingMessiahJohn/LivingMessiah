@page "/Sukkot/RegistrationSteps"
@page "/Sukkot/RegistrationShell"

@using System.Security.Claims
@using LivingMessiah.Features.Sukkot.Constants
@using LivingMessiah.Features.Sukkot.Data
@using LivingMessiah.Features.Sukkot.Domain
@using LivingMessiah.Features.Sukkot.Enums
@using LivingMessiah.Features.Sukkot.LandingPage
@using LivingMessiah.Features.Sukkot.RegistrationSteps.Enums
@using LivingMessiah.SecurityRoot
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Hosting;
@using static LivingMessiah.SecurityRoot.Auth0
@using GlobalNav = LivingMessiah.Enums.Nav;

@inject NavigationManager NavigationManager
@inject ILogger<Index>? Logger
@inject IToastService? Toast

@inject ISukkotRepositoryUsedBySukkotService? db

<PageTitle>@Pages.RegistrationSteps.Title</PageTitle>
<BreadCrumbNav Page2Index="@Pages.RegistrationSteps.Index"
							 Page2Title="@Pages.RegistrationSteps.Title"
							 Page2Active=" active" />


@* 
<AuthorizeView Roles="@Roles.SukkotMenuBar">
	<SukkotAdminMenubar></SukkotAdminMenubar>
</AuthorizeView>
*@

<div class="pb-2 mt-4 mb-2 border-bottom">
	<h2><i class="@Pages.RegistrationSteps.Icon"></i> @Pages.RegistrationSteps.Title</h2>
</div>

<LoadingComponent IsLoading="vw == null" TurnSpinnerOff=TurnSpinnerOff>

	<h5 class="mb-3 text-center">To register for Sukkot, you must complete these steps</h5>
	 <DebugShowStatusEnum UsersCurrentStatus="vm!.Status" /> 
	<StepGridHeader />

	@foreach (var item in Status.List.OrderBy(o => o.StepNumber).Where(w => w.UsedByUI).ToList())
	{
		<div class="@MediaQuery.Xs.DivClass">
			<Grid UsersCurrentStatus="@vm.Status"
						ComparisonStatus="@item"
						CurrentStepRecord="@vm.CurrentStepRecord"
						EmailParm="@vm.EmailAddress"
						IsXs="true"
						OnActionCompleted="ReturnedActionCompleted" />

		</div>
		<div class="@MediaQuery.SmOrMdOrLgOrXl.DivClass">
			<Grid UsersCurrentStatus="@vm.Status"
						ComparisonStatus="@item"
						CurrentStepRecord="@vm.CurrentStepRecord"
						EmailParm="@vm.EmailAddress"
						IsXs="false"
						OnActionCompleted="ReturnedActionCompleted" />
		</div>
	}

</LoadingComponent>

@code {
	[CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }
	string? Email; // => authenticationState is not null ? authenticationState.Result?.User?.Identity?.Name ?? string.Empty : string.Empty;

	protected bool TurnSpinnerOff = false;
	protected vwRegistrationStep? vw;
	IndexVM? vm { get; set; } = new IndexVM();

	protected override async Task OnInitializedAsync()
	{
		Logger!.LogDebug("{Method}", nameof(OnInitializedAsync));
		if (authenticationState is not null)
		{
			var state = await authenticationState;
			if (state!.User.Identity is not null)
			{
				Email = state.User.FindFirst(ClaimTypes.Email)?.Value;
			}
		}

		if (String.IsNullOrEmpty(Email))
		{
			Logger!.LogDebug("{Method} Email is null or Empty", nameof(ProcessRegistrationStep));
			//Toast!.ShowWarning("Not Authorize | Email is null or empty"); toast no worky when navigating to another page
			NavigationManager!.NavigateTo($"{GlobalNav.Sukkot.Index}");
		}

		vm!.EmailAddress = Email;
		await ProcessRegistrationStep();
	}

	private async Task ProcessRegistrationStep()
	{
		Logger!.LogDebug("{Method}", nameof(ProcessRegistrationStep));
		//await Task.Delay(20); 
		try
		{
			vw = await db!.GetByEmail(vm!.EmailAddress!);
			if (vw is not null)
			{
				vm!.HouseRulesAgreement = new HRARecord(vw.Id, vw.HouseRulesAgreementAcceptedDate, vw.HouseRulesAgreementTimeZone);

				if (vw.RegistrationId is not null)
				{
					vm!.CurrentStepRecord = new CurrentStepRecord(
						(int)vw.RegistrationId, vw.FirstName, vw.FamilyName, vw.TotalDonation, vw.RegistrationFeeAdjusted);
					vm!.Status = Status.FromValue((int)vw.StatusId!);
				}
				else
				{
					vm!.Status = Status.StartRegistration;
				}
			}
			else
			{
				vm!.Status = Status.AgreementNotSigned;
			}

			Logger!.LogInformation("{Method} {Status}", nameof(ProcessRegistrationStep), vm.Status);
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(ProcessRegistrationStep));
			Toast!.ShowError("An invalid operation occurred, contact your administrator");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

	private async Task ReturnedActionCompleted(Status nextStatus)
	{
		Logger!.LogDebug("{Method}, {Status}", nameof(ReturnedActionCompleted), nextStatus);

		// For some reason, I have to be more drastic and call ProcessRegistrationStep if Status is Payment
		if (nextStatus == Status.Payment)
		{
			await ProcessRegistrationStep();
		}

		// else I can change update the Status
		else
		{
			if (vm is not null)
			{
				vm!.Status = nextStatus;
			}
		}
	}

}

