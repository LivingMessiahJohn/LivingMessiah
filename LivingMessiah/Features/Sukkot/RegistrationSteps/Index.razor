@page "/Sukkot/RegistrationSteps"
@page "/Sukkot/RegistrationShell"

@using System.Security.Claims
@using LivingMessiah.Features.Sukkot.Constants
@using LivingMessiah.Features.Sukkot.Data
@using LivingMessiah.Features.Sukkot.Domain
@using LivingMessiah.Features.Sukkot.Enums
@using LivingMessiah.Features.Sukkot.LandingPage
@using LivingMessiah.Features.Sukkot.RegistrationSteps.Enums
@using LivingMessiah.SecurityRoot
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Hosting;
@using static LivingMessiah.SecurityRoot.Auth0
@using GlobalNav = LivingMessiah.Enums.Nav;

@using LivingMessiah.Features.Sukkot.RegistrationSteps.Agreement
@using LivingMessiah.Features.Sukkot.NormalUser

@inject NavigationManager NavigationManager
@inject ILogger<Index>? Logger
@inject IToastService? Toast

@inject ISukkotRepositoryUsedBySukkotService? db

@* 
<AuthorizeView Roles="@Roles.SukkotMenuBar">
	<SukkotAdminMenubar></SukkotAdminMenubar>
</AuthorizeView>
*@

<PageTop />

@if (CurrentStep is not null)
{
	<HeaderRow CurrentStep="CurrentStep" />

	<p class="text-center fs-5 mb-0 @StepConstants.Border @CurrentStep.CardBodyCSS">
		<b>Step:</b> @CurrentStep.Value
		<i class="@CurrentStep).Icon"></i>
		@CurrentStep.Heading
	</p>
}

@if (CurrentStep == Step.SignAgreement)
{
	<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
		<div class="card-body @CurrentStep!.CardBodyCSS">
			<Wrapper EmailParm="@Email" OnActionCompleted="ReturnedActionCompleted" />
		</div>
	</div>
}

<LoadingComponent IsLoading="vw == null" TurnSpinnerOff=TurnSpinnerOff>

	@* <DebugShowStepEnum UsersCurrentStep="vm!.Step" /> *@

	<StepSkeleton CurrentStep="Step.FromValue(vm.Step!.Value)">

		<RegistrationFormRF>
			@if (@vm.Step == Step.Registration)
			{
				<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
					<div class="card-body @CurrentStep!.CardBodyCSS">
						<EntryForm Email="@Email" Id="null"
											 OnActionCompleted="ReturnedActionCompleted" />
					</div>
				</div>

				@if (vm.Step!.EnableRegistrationToggleButton && vm.CurrentStepRecord is not null)
				{
					<Toggle Email="@Email" Id="@vm.CurrentStepRecord!.Id" />
				}
			}
		</RegistrationFormRF>

		<PaymentRF>
			@if (@vm.Step == Step.Payment && vm.CurrentStepRecord is not null)
			{
				<div class="@MediaQuery.Xs.DivClass">
					<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
						<div class="card-body">
							<PartlyPaidParagraph CurrentStepRecord="vm.CurrentStepRecord" />
						</div>
					</div>
				</div>
				<div class="@MediaQuery.SmOrMdOrLgOrXl.DivClass">
					<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
						<div class="card-body">
							<PartlyPaidParagraph CurrentStepRecord="vm.CurrentStepRecord" />
						</div>
					</div>
				</div>
			}
		</PaymentRF>

		<CompleteRF>
			@if (@vm.Step == Step.Complete)
			{
				<div class="card mt-0 mb-3 @CurrentStep!.CardBodyCSS">
					<div class="card-body">
						<CompleteParagraph CurrentStepRecordId="@vm.CurrentStepRecord!.Id" />
					</div>
				</div>
			}
		</CompleteRF>

	</StepSkeleton>

	@* "Footer" *@
	@if (vm.CurrentStepRecord is not null)
	{
		<Toggle Email="@Email" Id="vm.CurrentStepRecord.Id" />
	}
	else
	{
		<Toggle Email="@Email" Id="null" />
	}

</LoadingComponent>

@code {
	[CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }
	string? Email; // => authenticationState is not null ? authenticationState.Result?.User?.Identity?.Name ?? string.Empty : string.Empty;

	protected Step? CurrentStep;

	protected bool TurnSpinnerOff = false;
	protected vwRegistrationStep? vw;
	IndexVM? vm { get; set; } = new IndexVM();

	protected override async Task OnInitializedAsync()
	{
		Logger!.LogDebug("{Method}", nameof(OnInitializedAsync));
		if (authenticationState is not null)
		{
			var state = await authenticationState;
			if (state!.User.Identity is not null)
			{
				Email = state.User.FindFirst(ClaimTypes.Email)?.Value;
			}
		}

		if (String.IsNullOrEmpty(Email))
		{
			Logger!.LogDebug("{Method} Email is null or Empty", nameof(OnInitializedAsync));
			//Toast!.ShowWarning("Not Authorize | Email is null or empty"); toast no worky when navigating to another page
			NavigationManager!.NavigateTo($"{GlobalNav.Sukkot.Index}");
		}

		vm!.EmailAddress = Email;
		await ProcessRegistrationStep();
	}

	private async Task ProcessRegistrationStep()
	{
		Logger!.LogDebug("{Method}", nameof(ProcessRegistrationStep));
		//await Task.Delay(20);
		try
		{
			vw = await db!.GetByEmail(vm!.EmailAddress!);
			if (vw is not null)
			{
				vm!.HouseRulesAgreement = new HRARecord(vw.Id, vw.HouseRulesAgreementAcceptedDate, vw.HouseRulesAgreementTimeZone);

				if (vw.RegistrationId is not null)
				{
					vm!.CurrentStepRecord = new CurrentStepRecord(
						(int)vw.RegistrationId, vw.FirstName, vw.FamilyName, vw.TotalDonation, vw.RegistrationFeeAdjusted);
					vm!.Step = Step.FromValue((int)vw.StepId!);
					CurrentStep = vm!.Step;
				}
				else
				{
					vm!.Step = Step.Registration;
					CurrentStep = Step.FromValue(vm.Step!.Value);
				}
			}
			else
			{
				vm!.Step = Step.SignAgreement;
				CurrentStep = Step.FromValue(vm.Step!.Value);
			}

			Logger!.LogInformation("{Method} {Status} {Step}", nameof(ProcessRegistrationStep), vm.Step, CurrentStep);
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(ProcessRegistrationStep));
			Toast!.ShowError("An invalid operation occurred, contact your administrator");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

	private async Task ReturnedActionCompleted(Step nextStep)
	{
		Logger!.LogDebug("{Method}, {Step}", nameof(ReturnedActionCompleted), nextStep);
		CurrentStep = nextStep;
		await ProcessRegistrationStep();
	}

}

