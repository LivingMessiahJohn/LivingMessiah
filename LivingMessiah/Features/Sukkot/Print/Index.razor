@page "/Sukkot/Print/{Id:int}/{showPrintInstructionMessage:bool}"
@* used to be Sukkot/Details, should I add another page directive? *@

@using LivingMessiah.Features.Sukkot.Enums
@using LivingMessiah.SecurityRoot
@using Microsoft.AspNetCore.Components.Authorization

@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject ISecurityHelper? SecurityHelper
@inject Data.IRepository? db

<PageTitle>@NavButton.Print.Title</PageTitle>

<Toolbar />

<AuthorizeView Policy="EmailVerified">
	<Authorized>
		<LoadingComponent IsLoading="vwRegistration == null" TurnSpinnerOff=TurnSpinnerOff>

			@if (IsAuthorized)
			{
				<Details vwRegistration="@vwRegistration" />
			}
			else
			{
				<p class="fs-3 bg-danger text-center text-white mt-5 mx-5">NOT Authorized to view content</p>
			}
		</LoadingComponent>
	</Authorized>
	<NotAuthorized>
		<p class="fs-5 bg-danger text-center text-white mt-5 mx-5">NOT Authorized</p>
	</NotAuthorized>

</AuthorizeView>

@code {
	[CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }
	[Parameter, EditorRequired] public int Id { get; set; }
	[Parameter] public bool showPrintInstructionMessage { get; set; } = true;

	protected bool TurnSpinnerOff = false;
	string? Email;
	protected bool IsAuthorized = false;

	public Domain.vwRegistration? vwRegistration { get; set; }
	private string[] OverrideRoles = new[] { Auth0.Roles.Sukkot, Auth0.Roles.Admin };

	protected override async Task OnInitializedAsync()
	{
		Logger!.LogDebug("{Method} {Id}", nameof(OnInitializedAsync), Id);
		try
		{
			Email = await SecurityHelper!.GetEmail();
			if (String.IsNullOrEmpty(Email))
			{
				DoToastLog("Email is empty");
			}
			else
			{
				vwRegistration = await db!.ById(Id);

				if (vwRegistration is not null)
				{
					var (passed, errorMsg, securityOverride) = await SecurityHelper!.DoAuthentication(Email!, vwRegistration.EMail ?? "");

					if (passed)
					{
						DoPassed();
					}
					else
					{
						DoToastLog($"Failed DoAuthentication | {errorMsg}");
					}
				}
				else
				{
					DoToastLog("Registration Not Found");
				}
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnInitializedAsync));
			Toast!.ShowError("An invalid operation occurred, contact your administrator");
		}
		finally
		{
			TurnSpinnerOff = true;
		}
	}

	private void DoToastLog(string message)
	{
		Logger!.LogWarning("{Method} {Message}", nameof(DoToastLog), message);
		Toast!.ShowWarning(message);
	}

	private void DoPassed()
	{
		IsAuthorized = true;
		(DateTime[]? week1, DateTime[]? week2) = Helper.GetAttendanceDatesArray(vwRegistration!.AttendanceBitwise);
		vwRegistration.AttendanceDateList = week1;
		vwRegistration.AttendanceDateList2ndMonth = week2!;
	}

}
