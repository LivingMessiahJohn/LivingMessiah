@using FeastEnums = LivingMessiah.Features.Feasts.Enums
@using CalendarEnums = LivingMessiah.Features.Calendar.Enums
@using LivingMessiah.Helpers
@using NavEnums = LivingMessiah.Enums.Nav
@using LivingMessiah.Features.FeastDayPlanner
@using LivingMessiah.Features.FeastDayPlanner.Data

@inject IService? Service
@inject ILogger<FeastCards>? Logger
@inject IToastService? Toast

@if (FeastList is not null && FeastList.Count() != 0)
{
  <div class="container text-center">
    @if (IsXs)
    {
      <h3 class="bg-warning text-black mt-5 mb-3 p-2"><b>Upcoming Feasts</b></h3>
    }
    else
    {
      <div class="row mt-4">
        <div class="col-1"></div>
        <div class="col-10">
          <h2 class="bg-warning text-center text-black p-2"><b>Upcoming Feasts</b></h2>
        </div>
        <div class="col-1"></div>
      </div>
    }
  </div>

  @foreach (var item in FeastList)
  {
    @if (IsXs)
    {
      <div class="container">
        {
        <p class="mb-0 text-end fs-6 text-black-50">@item.DaysAway) days away</p>
        }
        <div class="card border border-warning border-4 mb-4">
          <div class="row g-0">
            <div class="col-5 "><img src="@item.Image" class="img-fluid rounded-start" alt="@item.Title"></div>
            <div class="col-7 bg-warning-subtle text-center">
              <div class="mt-2"><RelatedVersesAnchor Title="@item.Title" Index="@item.Index" FontSize="@FontSize" /></div>
              <div class="text-primary @HebrewCSS">@item!.FloatRightHebrew</div>
              <div class=""><SpecialEventAnchor Title="@item.Title" Index="@item.Index" IsXs=IsXs /></div>
            </div>
          </div>
        </div>
      </div>

    }
    else
    {
      <div class="container">
        <div class="row">
          <div class="col-1"></div>
          <div class="col-10">
              <div class="d-flex justify-content-between">
                <span class="fs-6 text-black-50">Date: @item.RangeFormatted</span>
                <span class="fs-6 text-black-50">@item.DaysAway days away</span>
              </div>
            <div class="card border border-warning border-4 mb-4">
              <div class="row g-0">
                <div class="col-5 "><img src="@item.Image" class="img-fluid rounded-start" alt="@item.Title"></div>
                <div class="col-7 bg-warning-subtle text-center">
                  <div class="mt-2"><RelatedVersesAnchor Title="@item.Title" Index="@item.Index" FontSize="@FontSize" /></div>
                  <div class="text-primary @HebrewCSS">@item!.FloatRightHebrew</div>
                  <div class=""><SpecialEventAnchor Title="@item.Title" Index="@item.Index" IsXs=IsXs /></div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-1"></div>
        </div>
      </div>
    }
  }

}


@code {
  [Parameter, EditorRequired] public bool IsXs { get; set; }
  [Parameter] public DateTime? CurrentDateOverride { get; set; }

  protected string FontSize => IsXs ? " fs-5" : " fs-2";
  protected string HebrewCSS => IsXs ? " hebrew" : "  hebrew44";

  protected List<FeastCardDTO>? FeastList;

  DateTime CurrentDate;

  protected override void OnParametersSet()
  {
    try
    {
      CurrentDate = CurrentDateOverride ?? GetCurrentDate();

      Logger!.LogDebug("{Method}, {Message}", $"{nameof(GetCurrentDate)} (just called)"
      , $"CurrentDate: {CurrentDate.ToShortDateString()}");

      FeastList = (from feast in FeastEnums.Feast.List.ToList()
                   join feastDay in CalendarEnums.FeastDay.List.ToList()
                       on feast.FeastDay?.Value equals feastDay.Value
                   where CurrentDate >= feastDay.StartShowingCard && CurrentDate <= feastDay.Range.Max
                   orderby feast.Value
                   select new FeastCardDTO
                   {
                     Title = feast.Title,
                     Index = feast.Index,
                     Image = feast.Image,
                     FloatRightHebrew = feast.Hebrew.FloatRightHebrew ?? "",
                     RangeFormatted = feastDay.RangeFormatted, 
                     DaysAway = (feastDay.Date - CurrentDate).Days
                   }).ToList();
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(OnParametersSet));
      Toast!.ShowError($"{Global.ToastShowError} {nameof(FeastCards)}!{nameof(OnParametersSet)}");
    }

  }

  private DateTime GetCurrentDate()
  {
    return DateUtil.GetDateTimeWithoutTime(DateTime.Now.AddDays(Test.AddDays).AddHours(Utc.ArizonaUtcMinus7));
  }

}

