@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using LivingMessiahAdmin.Enums
@using LivingMessiahAdmin.SecurityRoot
@using System.Security.Claims

@inject NavigationManager NavigationManager

<div class="h5">
  <ul class="fa-ul">
    @if (authorizedNavItems != null)
    {
      @foreach (var item in authorizedNavItems)
      {
        <li class="py-1">
          <span class="fa-li"><i class="@item.Icon"></i></span>
          <a @onclick="@(e => ButtonClicked(item))"
             title="@item.Title" class="@item.TextColor text-decoration-underline">
            @item.Title
          </a>
          @if (item.Disabled)
          {
            <text>&nbsp;</text>
            <span class="text-black-50"><i class="fas fa-ban"></i></span>
          }
        </li>
      }
    }
  </ul>
</div>

@code {
  [CascadingParameter] private Task<AuthenticationState>? authenticationState { get; set; }
  
  private IEnumerable<Nav>? authorizedNavItems;

  protected override async Task OnInitializedAsync()
  {
    authorizedNavItems = await GetAuthorizedNavItems();
  }

  private void ButtonClicked(Nav nav)
  {
    NavigationManager!.NavigateTo(nav.Index);
  }

  private async Task<IEnumerable<Nav>> GetAuthorizedNavItems()
  {
    if (authenticationState == null)
    {
      return Nav.List.ToList()
        .Where(w => w.Value != Nav.Home.Value && w.Value != Nav.Profile.Value && w.RequiredRoles == 0)
        .OrderBy(o => o.Value);
    }

    var state = await authenticationState;
    var userRoles = GetUserRoleBitmask(state.User);

    return Nav.List.ToList()
      .Where(w => w.Value != Nav.Home.Value && w.Value != Nav.Profile.Value && HasRequiredRole(w.RequiredRoles, userRoles))
      .OrderBy(o => o.Value);
  }

  private int GetUserRoleBitmask(ClaimsPrincipal user)
  {
    if (user == null || !user.Identity!.IsAuthenticated)
    {
      return 0;
    }

    int userRoles = 0;

    // Check for each role claim and build the bitmask
    var roleClaims = user.Claims.Where(c => c.Type == Auth0.MicrosoftSchemaIdentityClaimsRole);
    
    foreach (var roleClaim in roleClaims)
    {
      if (roleClaim.Value == Role.Admin.Claim)
        userRoles |= Role.Admin.Value;
      else if (roleClaim.Value == Role.KeyDates.Claim)
        userRoles |= Role.KeyDates.Value;
      else if (roleClaim.Value == Role.Sukkot.Claim)
        userRoles |= Role.Sukkot.Value;
      else if (roleClaim.Value == Role.SukkotHost.Claim)
        userRoles |= Role.SukkotHost.Value;
      else if (roleClaim.Value == Role.Announcements.Claim)
        userRoles |= Role.Announcements.Value;
    }

    return userRoles;
  }

  private bool HasRequiredRole(int requiredRoles, int userRoles)
  {
    // If no roles are required (requiredRoles == 0), allow access
    if (requiredRoles == 0)
      return true;

    // Check if user has any of the required roles using bitwise AND
    return (userRoles & requiredRoles) != 0;
  }
}
