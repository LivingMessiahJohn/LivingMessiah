@using LivingMessiahAdmin.Features.Sukkot.Dashboard.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using FilterEnums = LivingMessiahAdmin.Features.Sukkot.Dashboard.Enums.Filter

@inject ILogger<Grid>? Logger
@inject IRepository? db;
@inject IToastService? Toast

<LoadingComponent IsLoading="data == null" TurnSpinnerOff=TurnSpinnerOff>
  @if (data != null)
  {

    @if (TotalsCardRecord is not null)
    {
      <FilterRowCount Rows="TotalsCardRecord.RowCnt" />
    }

    @if (SelectedItem != null)
    {
      <DetailCard rec="DetailCardRecord" OnClose="ReturnedCloseAction" />
    }

    <QuickGrid Items="@data.AsQueryable()" TGridItem="GridQuery" Class="table table-striped table-hover">
      <PropertyColumn Property="@(item => item.Id)" Title="Id" Sortable="true" Align="Align.Center" />
      <PropertyColumn Property="@(item => item.EMail)" Title="EMail" Sortable="true" />
      <PropertyColumn Property="@(item => item.FullNameOrNA)" Title="Name" Sortable="true" IsDefaultSortColumn="true" />
      <PropertyColumn Property="@(item => item.Phone)" Title="Phone" />

      <PropertyColumn Property="@(item => item.People)" Align=Align.Center Title="People" />
      <TemplateColumn Title="$ Paid">
        <div class="@context.TotalDonationClass">
          @context.TotalDonationNoCents
        </div>
      </TemplateColumn>

      <TemplateColumn Title="Notes" Align=Align.Center>
        <span class="@(context.HasAdminNotes ? "bg-warning p-1" : "p-1")">A</span>
        <span class="text-black-50"> | </span>
        <span class="@(context.HasNotes ? "bg-info p-1" : "p-1")">U</span>
        &nbsp;
        <button @onclick="@(() => ShowDetails(context))" class="btn btn-sm btn-outline-primary d-print-none">
          <i class="fas fa-caret-down"></i>
        </button>
      </TemplateColumn>

    </QuickGrid>

    @if (TotalsCardRecord is not null)
    {
      <TotalsCard TotalsCardRecord="TotalsCardRecord" />
    }

  }
</LoadingComponent>

@code {
  [Parameter, EditorRequired] public required FilterEnums? Filter { get; set; } = FilterEnums.RegisteredOrPaid;

  protected TotalsCardRecord? TotalsCardRecord { get; set; }

  bool TurnSpinnerOff = false;
  protected List<GridQuery>? data;

  protected override async Task OnParametersSetAsync()
  {
    Logger!.LogDebug("{Method} {Message}", nameof(OnParametersSetAsync), $"Filter: {Filter!.Name}");

    try
    {
      if (Filter == null)
      {
        throw new ArgumentNullException(nameof(Filter), $"{nameof(Filter)} is null");
      }
      else
      {
        data = await db!.GetAll(Filter);
        if (data is not null)
        {
          TotalsCardRecord = new TotalsCardRecord(data.Count(), data.Sum(s => s.Adults), data.Sum(s => s.Children));
        }
        else
        {
          Logger!.LogWarning("{Method} {Message}", nameof(OnParametersSetAsync), "RegistrationList is null");
          Toast!.ShowWarning($"RegistrationList is null");
        }
      }
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
      Toast!.ShowError($"An invalid operation occurred, contact your administrator | {nameof(OnParametersSetAsync)}");
    }
    TurnSpinnerOff = true;
  }

  private GridQuery? SelectedItem = null;

  private static readonly GridSort<GridQuery> GridSort = GridSort<GridQuery>
    .ByAscending(p => p.FullNameOrNA);

  private DetailCardRecord? DetailCardRecord;
  private void ShowDetails(GridQuery? item)
  {
    if (item is not null)
    {
      SelectedItem = item;
      DetailCardRecord = new DetailCardRecord(item.Id, item!.FullName ?? "None", item!.AdminNotes ?? "", item!.Notes ?? "");
    }
  }

  private void ReturnedCloseAction()
  {
    SelectedItem = null;
  }

}
