@using LivingMessiahAdmin.Features.Sukkot.Dashboard.Data
@using LivingMessiahAdmin.Features.Sukkot.Dashboard.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using FilterEnums = LivingMessiahAdmin.Features.Sukkot.Dashboard.Enums.Filter
@using ShowColumnEnums = LivingMessiahAdmin.Features.Sukkot.Dashboard.Enums.ShowColumn
@using SukkotEnumsHelpers = LivingMessiahAdmin.Features.Sukkot.Enums.Helpers

@inject ILogger<Grid>? Logger
@inject IRepository? db;
@inject IToastService? Toast
@inject ExportCSV ExportCSV

<TopRowButtons OnCommandDoExport="ReturnedOnCommandDoExport" />

<LoadingComponent IsLoading="items == null" TurnSpinnerOff=TurnSpinnerOff>
  @if (items != null)
  {
    @if (TotalsCardRecord is not null)
    {
      <FilterButtons Filter="CurrentFilter" OnFilterSelected="ReturnedFilter" />
      <FilterRowCount Rows="TotalsCardRecord.RowCnt"
                      FilteredRows="@(FilteredItems?.Count() ?? 0)"
                      SearchFilter="@nameFilter" />
    }

    <div class="@MediaQuery.XsOrSm.DivClass">
      <ShowColumnSelector Bitwise=Bitwise IsXsOrSm="true" OnShowColumnChanged="ReturnedShowColumn" />
    </div>
    <div class="d-none d-md-block">
      <ShowColumnSelector Bitwise=Bitwise IsXsOrSm="false" OnShowColumnChanged="ReturnedShowColumn" />
    </div>

    @if (SelectedItem != null)
    {
      <DetailCard rec="DetailCardRecord" OnClose="ReturnedCloseAction" />
    }

    <QuickGrid Items="FilteredItems" TGridItem="GridQuery" Class="table table-striped table-hover">
      <TemplateColumn Title="Id" Sortable="true" Align=Align.Center SortBy="@(GridSort<GridQuery>.ByAscending(x => x.Id))">
        <b>@context.Id</b>
        <button @onclick="@(() => ShowDetails(context))" class="btn btn-sm btn-outline-primary d-print-none">
          <i class="fas fa-caret-up"></i>
        </button>
      </TemplateColumn>

      <PropertyColumn Property="@(item => item.FullNameOrNA)" Title="Name" Sortable="true" IsDefaultSortColumn="true">
        <ColumnOptions>
          <div class="search-box">
            <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="filter by name" />
          </div>
        </ColumnOptions>
      </PropertyColumn>

      @if ((Bitwise & ShowColumnEnums.Email.Value) != 0)
      {
        <PropertyColumn Property="@(item => item.EMail)" Title="EMail" Sortable="true" />
      }

      @if ((Bitwise & ShowColumnEnums.Phone.Value) != 0)
      {
        <PropertyColumn Property="@(item => item.Phone)" Title="Phone" />
      }


      @if ((Bitwise & ShowColumnEnums.People.Value) != 0)
      {
        <PropertyColumn Property="@(item => item.People)" Align=Align.Center Title="People" />
      }

      @if ((Bitwise & ShowColumnEnums.Paid.Value) != 0)
      {
        <TemplateColumn Title="Paid" Align=Align.Center>
          <div class="@context.TotalDonationClass text-center">
            @context.TotalDonationNoCents
          </div>
        </TemplateColumn>
      }


      @if ((Bitwise & ShowColumnEnums.Attendance.Value) != 0)
      {
        <TemplateColumn Title="@Constants.GridHelper.GetAttendanceDatesColumnHeader()" Align=Align.Center>
          <div class="">
            <div>
              <span style="white-space: pre;">@context.AttendanceColumnValue</span>
            </div>
          </div>
        </TemplateColumn>
      }

      @if ((Bitwise & ShowColumnEnums.Notes.Value) != 0)
      {
        <TemplateColumn Title="Notes" Align=Align.Center>
          <span class="@(context.HasAdminNotes ? "bg-warning p-1" : "p-1")">A</span>
          <span class="text-black-50"> | </span>
          <span class="@(context.HasNotes ? "bg-info p-1" : "p-1")">U</span>
        </TemplateColumn>
      }

    </QuickGrid>

    @if (TotalsCardRecord is not null)
    {
      <TotalsCard TotalsCardRecord="TotalsCardRecord" />
    }


  }
</LoadingComponent>

@code {

  string nameFilter = string.Empty;
  protected TotalsCardRecord? TotalsCardRecord { get; set; }
  bool TurnSpinnerOff = false;

  protected IQueryable<GridQuery>? items;
  IQueryable<GridQuery>? FilteredItems => items?.Where(x => x.FullName!.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

  protected override async Task OnInitializedAsync()
  {
    Logger!.LogDebug("{Method}", nameof(OnInitializedAsync));
    try
    {
      await PopulateGrid();
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
      Toast!.ShowError($"An invalid operation occurred, contact your administrator | {nameof(OnParametersSetAsync)}");
    }
    TurnSpinnerOff = true;
  }

  private async Task PopulateGrid()
  {
    Logger!.LogDebug("{Method}", nameof(PopulateGrid));
    await Task.Delay(500);
    try
    {
      items = (await db!.GetAll(CurrentFilter!)).AsQueryable();
      if (items is not null)
      {
        TotalsCardRecord = new TotalsCardRecord(items.Count(), items.Sum(s => s.Adults), items.Sum(s => s.Children));
      }
      else
      {
        Logger!.LogWarning("{Method} {Message}", nameof(OnParametersSetAsync), "RegistrationList is null");
        Toast!.ShowWarning($"RegistrationList is null");
      }
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(PopulateGrid));
      Toast!.ShowError($"{Global.ToastShowError} | {nameof(PopulateGrid)}");
    }
  }

  private GridQuery? SelectedItem = null;

  private static readonly GridSort<GridQuery>
    GridSort = GridSort<GridQuery>
      .ByAscending(p => p.FullNameOrNA);

  protected FilterEnums? CurrentFilter = FilterEnums.RegisteredOrPaid;
  private async Task ReturnedFilter(FilterEnums filter)
  {
    Logger!.LogDebug("{Method} {Message}", nameof(ReturnedFilter), $"CurrentFilter: {(CurrentFilter == null ? "NULL" : CurrentFilter.Name)}; filter: {filter.Name}");
    CurrentFilter = filter;
    await PopulateGrid();
  }

  private DetailCardRecord? DetailCardRecord;
  private void ShowDetails(GridQuery? item)
  {
    if (item is not null)
    {
      SelectedItem = item;
      
      DetailCardRecord = new DetailCardRecord(
        item.Id, item!.FullName ?? "None"
        , item!.AdminNotes ?? ""
        , item!.Notes ?? ""
        , SukkotEnumsHelpers.RegistrationFeeHelper.AdultsToRegistrationFee(item.Adults));
    }
  }

  private void ReturnedCloseAction()
  {
    SelectedItem = null;
  }

  private async Task ReturnedOnCommandDoExport()
  {
    if (FilteredItems != null)
    {
      try
      {
        await ExportCSV.DownloadCSV(FilteredItems.ToList());
        Logger!.LogDebug("{Method} {Message}", nameof(ReturnedOnCommandDoExport), $"Download complete; Constants: {Constants.ExportCSVHelper.Dump()}");
      }
      catch (Exception ex)
      {
        Logger!.LogError(ex, "{Method}", nameof(ReturnedOnCommandDoExport));
        Toast!.ShowError($"An invalid operation occurred, contact your administrator | {nameof(ReturnedOnCommandDoExport)}");
      }
    }
    else
    {
      Toast!.ShowWarning($"FilteredItems is null");
    }
  }

  // Initial default setting done by using `Bitwise Operator` `|` (OR).
  protected int Bitwise = ShowColumnEnums.Email.Value | ShowColumnEnums.People.Value | ShowColumnEnums.Paid.Value | ShowColumnEnums.Attendance.Value;

  private void ReturnedShowColumn(int bitwise)
  {
    Bitwise = bitwise;
    Logger!.LogDebug("{Method} {Message}", nameof(ReturnedShowColumn), $"Returned Bitwise: {bitwise}");
  }
}
