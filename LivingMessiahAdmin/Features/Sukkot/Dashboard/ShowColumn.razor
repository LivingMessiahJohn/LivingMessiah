@inject ILogger<ShowColumn>? Logger

@if (IsXsOrSm)
{
  <div class="btn-group-vertical btn-group-md dropend" role="group" aria-label="Show columns dropdown">
    <button type="button" class="btn btn-primary btn-md dropdown-toggle"
            data-bs-toggle="dropdown" aria-expanded="false">
      Show
    </button>
    <ul class="dropdown-menu">
      <li class="dropdown-item">
        <button type="button" class="btn btn-outline-primary btn-sm w-100"
                @onclick="() => ToggleColumn(ShowColumnEnum.Email)">
          @(rec?.ShowEmail == true ? "Hide Email" : "Show Email")
        </button>
      </li>
      <li class="dropdown-item">
        <button type="button" class="btn btn-outline-primary btn-sm w-100"
                @onclick="() => ToggleColumn(ShowColumnEnum.People)">
          @(rec?.ShowPeople == true ? "Hide People" : "Show People")
        </button>
      </li>
      <li class="dropdown-item">
        <button type="button" class="btn btn-outline-primary btn-sm w-100"
                @onclick="() => ToggleColumn(ShowColumnEnum.Paid)">
          @(rec?.ShowPaid == true ? "Hide Paid" : "Show Paid")
        </button>
      </li>
      <li class="dropdown-item">
        <button type="button" class="btn btn-outline-primary btn-sm w-100"
                @onclick="() => ToggleColumn(ShowColumnEnum.Notes)">
          @(rec?.ShowNotes == true ? "Hide Notes" : "Show Notes")
        </button>
      </li>
    </ul>
  </div>
}
else
{
  <div class="d-flex align-items-center gap-3 bg-body-secondary p-1">
    <span><b>Show:</b></span>
    <div class="form-check form-check-inline">
      <input class="form-check-input" type="checkbox" id="emailCheckbox"
             checked="@rec!.ShowEmail"
             @onchange="@(e => OnColumnChanged(e, ShowColumnEnum.Email))">
      <label class="form-check-label" for="emailCheckbox">Email</label>
    </div>
    <div class="form-check form-check-inline">
      <input class="form-check-input" type="checkbox" id="peopleCheckbox"
             checked="@rec!.ShowPeople"
             @onchange="@(e => OnColumnChanged(e, ShowColumnEnum.People))">
      <label class="form-check-label" for="peopleCheckbox">People</label>
    </div>
    <div class="form-check form-check-inline">
      <input class="form-check-input" type="checkbox" id="paidCheckbox"
             checked="@rec!.ShowPaid"
             @onchange="@(e => OnColumnChanged(e, ShowColumnEnum.Paid))">
      <label class="form-check-label" for="paidCheckbox">Paid</label>
    </div>
    <div class="form-check form-check-inline">
      <input class="form-check-input" type="checkbox" id="notesCheckbox"
             checked="@rec!.ShowNotes"
             @onchange="@(e => OnColumnChanged(e, ShowColumnEnum.Notes))">
      <label class="form-check-label" for="notesCheckbox">Notes</label>
    </div>
  </div>
}

@code {
  [Parameter] public ShowColumnRecord? rec { get; set; }
  [Parameter, EditorRequired] public bool IsXsOrSm { get; set; }
  [Parameter] public EventCallback<ShowColumnReply> OnShowColumnChanged { get; set; }

  private void OnColumnChanged(ChangeEventArgs e, ShowColumnEnum column)
  {
    ShowColumnReply reply = new ShowColumnReply(column, (bool)e.Value!);
    OnShowColumnChanged.InvokeAsync(reply);
  }

  private void ToggleColumn(ShowColumnEnum column)
  {
    bool newValue = column switch
    {
      ShowColumnEnum.Email => !(rec?.ShowEmail ?? false),
      ShowColumnEnum.People => !(rec?.ShowPeople ?? false),
      ShowColumnEnum.Paid => !(rec?.ShowPaid ?? false),
      ShowColumnEnum.Notes => !(rec?.ShowNotes ?? false),
      _ => false
    };
    ShowColumnReply reply = new ShowColumnReply(column, newValue);
    OnShowColumnChanged.InvokeAsync(reply);
  }
}

