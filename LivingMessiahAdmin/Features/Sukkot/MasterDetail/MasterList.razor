@using LivingMessiahAdmin.Features.Sukkot.ManageRegistration.Data

@inject ILogger<MasterList>? Logger
@inject IRepository? db;
@inject IToastService? Toast

<DetailTopButtonGroup />

<LoadingComponent IsLoading="RegistrationList == null" TurnSpinnerOff=TurnSpinnerOff>
	<div class="@MediaQuery.XsOrSm.DivClass">
		<RegistrationListCard RegistrationList="RegistrationList"
													OnCrudActionSelected="ReturnedCrudActionSelected" />
	</div>
	<div class="@MediaQuery.MdOrLgOrXl.DivClass">
		<RegistrationListTable RegistrationList="RegistrationList"
													 OnCrudActionSelected="ReturnedCrudActionSelected" />
	</div>
</LoadingComponent>

<StatusInlineUL />
<HelpInlineUL />

@code {
	[Parameter] public EventCallback<CrudAndIdArgs> OnCrudActionSelected { get; set; }

	void ReturnedCrudActionSelected(CrudAndIdArgs args)
	 {
	 	OnCrudActionSelected.InvokeAsync(args);
	 }

	bool TurnSpinnerOff = false;

	protected List<ManageRegistrationQuery>? RegistrationList;

	protected override async Task OnInitializedAsync()
	{
		Logger!.LogDebug("{Method}", nameof(OnInitializedAsync));

		try
		{
			RegistrationList = await db!.GetAll();
			if (RegistrationList is null)
			{
				Logger!.LogWarning("{Method} {Message}", nameof(OnInitializedAsync), "RegistrationList is null");
				Toast!.ShowWarning($"RegistrationList is null");
			}

		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "{Method}", nameof(OnInitializedAsync));
			Toast!.ShowError($"An invalid operation occurred, contact your administrator | {nameof(OnInitializedAsync)}");
		}

		TurnSpinnerOff = true;
	}


}
