@using LivingMessiahAdmin.Features.Sukkot.Enums
@using LivingMessiahAdmin.Features.Sukkot.MasterDetail.Enums
@using RegStatusEnums = LivingMessiahAdmin.Features.Sukkot.Enums
 
@* @using HRA_State = LivingMessiahAdmin.Features.Sukkot.ManageRegistration.HRA *@

@inject ILogger<ActionButtonGroup>? Logger

@* @if (StatusId == RegStatusEnums.Status.StartRegistration.Value) *@

@if (StatusId == Step.Registration.Value)
{
	@foreach (var item in Crud.List
					.OrderBy(o => o.Sort)
					.Where(w => w.IsStartRegistration == true))
	{
		<CrudButtons OnCrudActionSelected="@ReturnedCrud"
								 ParmCrud="Crud.FromValue(item)"
								 Id="@IdHra"
								 FullName="@FullName"
								 DonationRowCount="@DonationRowCount"
								 EMail="@EMail" />
	}
}
else
{
	@foreach (var item in Crud.List
							.OrderBy(o => o.Sort)
							.Where(w => w.IsStartRegistration == false))
	{
		<CrudButtons OnCrudActionSelected="@ReturnedCrud"
								 ParmCrud="Crud.FromValue(item)"
								 Id="@Id"
								 FullName="@FullName"
								 DonationRowCount="@DonationRowCount"
								 EMail="@EMail" />
	}
}

@code {
	[Parameter] public string? EMail { get; set; }
	[Parameter] public int Id { get; set; }
	[Parameter] public int IdHra { get; set; }
	[Parameter] public string? FullName { get; set; }
	[Parameter] public int DonationRowCount { get; set; }
	[Parameter, EditorRequired] public int StatusId { get; set; }

	[Parameter] public EventCallback<CrudAndIdArgs> OnCrudActionSelected { get; set; }

	private async Task ReturnedCrud(CrudAndIdArgs args)
	{
		Logger!.LogDebug("{Method}, {Crud}", nameof(ReturnedCrud), args.Crud.Name);

		switch (args.Crud.Name)
		{
			case nameof(Crud.AddRegistration):
				await OnCrudActionSelected.InvokeAsync(args);
				break;

			case nameof(Crud.Edit):
				await OnCrudActionSelected.InvokeAsync(args);
				break;

			case nameof(Crud.Display):
				await OnCrudActionSelected.InvokeAsync(args);
				break;

			case nameof(Crud.DeleteRegistration):
				break;

			case nameof(Crud.DeleteHRA):
				await OnCrudActionSelected.InvokeAsync(args);
				break;

			case nameof(Crud.Donation):
				await OnCrudActionSelected.InvokeAsync(args);
				break;

			default:
				Logger!.LogWarning("{Method}, {Crud}", nameof(ReturnedCrud), "Crud Name unknown!!!");
				break;
		}
	}

	//[CascadingParameter] IModalService Modal { get; set; } = default!;

	/*
		private async Task<bool> IsModalConfirmed(string title, string label, string value)
	{
		var parameters = new ModalParameters { { nameof(ConfirmDeleteModal.Message), $"{title} for {label}: {value}" } };
		var modal = Modal.Show<ConfirmDeleteModal>("Confirmation Required", parameters);
		var result = await modal.Result;
		return result.Confirmed;
	}
	 */

}