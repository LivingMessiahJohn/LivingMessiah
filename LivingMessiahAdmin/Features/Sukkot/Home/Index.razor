@page "/Sukkot"

@using LivingMessiahAdmin.Features.Sukkot.Enums
@using LivingMessiahAdmin.Features.Sukkot.Home.Data
@using LivingMessiahAdmin.Features.Sukkot.Home.Donations
@using LivingMessiahAdmin.Features.Sukkot.Home.Registrant
@using LivingMessiahAdmin.Features.Sukkot.Home.RegistrationList
@using LivingMessiahAdmin.Features.Sukkot.Home.RegistrationList.Enums
@using LivingMessiahAdmin.Features.Sukkot.Home.RegistrationDetail

@inject ILogger<Index>? Logger
@inject IRepository? db;
@inject IToastService? Toast

@if (VisibleComponent == Enums.VisibleComponent.RegistrationList)
{
  <PageHeaderMenubar MenuBarEnum=MenuBar.Home ShowPrintButton=true />

  <LoadingComponent IsLoading="RegistrationList == null" TurnSpinnerOff=TurnSpinnerOff>
    <div class="@MediaQuery.XsOrSm.DivClass">
      <XsSmCard RegistrationList="RegistrationList"
                OnCrudActionSelected="ReturnedCrudActionSelected" />
    </div>
    <div class="@MediaQuery.MdOrLgOrXl.DivClass">
      <MdLgXlTable RegistrationList="RegistrationList"
                   OnCrudActionSelected="ReturnedCrudActionSelected" />
    </div>

    <StatusInlineUL />
    <HelpInlineUL />
  </LoadingComponent>
}
else
{
  <ShowMasterIndexButton OnShowListSelected="ReturnedShowList" />
  <DetailPageHeader DetailPageHeaderVM="DetailPageHeaderVM" />

  @if (VisibleComponent == Enums.VisibleComponent.Registrant)
  {
    <RegistrantForm />
  }
  else
  {
    if (VisibleComponent == Enums.VisibleComponent.RegistrationDetail)
    {
      <div class="card border-primary my-3 p-2">
        <Report RegistrationId="Id" />
      </div>
    }
    else
    {
      <div class="alert alert-warning text-center fs-4" role="alert">
        Inside: <b>@nameof(Index)</b>  <br /> Unknown <code>VisibleComponent</code>
      </div>
    }
  }

}

@code {

  protected Enums.VisibleComponent? VisibleComponent { get; set; } = Enums.VisibleComponent.RegistrationList;

  bool TurnSpinnerOff = false;

  protected List<Data.RegistrationListQuery>? RegistrationList;


  int Id { get; set; } = 0;
  DetailPageHeaderVM? DetailPageHeaderVM;

  protected override async Task OnInitializedAsync()
  {
    Logger!.LogDebug("{Method}", nameof(OnInitializedAsync));

    try
    {
      RegistrationList = await db!.GetAll();
      if (RegistrationList is null)
      {
        Logger!.LogWarning("{Method} {Message}", nameof(OnInitializedAsync), "RegistrationList is null");
        Toast!.ShowWarning($"RegistrationList is null");
      }

    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(OnInitializedAsync));
      Toast!.ShowError($"An invalid operation occurred, contact your administrator | {nameof(OnInitializedAsync)}");
    }

    TurnSpinnerOff = true;
  }


  private void ReturnedShowList()
  {
    VisibleComponent = Enums.VisibleComponent.RegistrationList;
  }

  void ReturnedCrudActionSelected(CrudRecord args)
  {
    if (args.Crud == Crud.Display)
    {
      Id = args.Id;
      VisibleComponent = Enums.VisibleComponent.RegistrationDetail;
      DetailPageHeaderVM = new DetailPageHeaderVM(args.Crud.Name, args.FullName);
    }
    else
    {
      if (args.Crud == Crud.Edit)
      {
        VisibleComponent = Enums.VisibleComponent.Registrant;
        DetailPageHeaderVM = new DetailPageHeaderVM(args.Crud.Name, args.FullName);
      }
    }
  }
}
