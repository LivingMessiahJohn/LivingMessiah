@using LivingMessiahAdmin.Features.Sukkot.ManageRegistration.Data

@inject ILogger<PreviousDonationsTable>? Logger
@inject IRepository? db;
@inject IToastService? Toast

<h4 class="mt-4 mb-1">
	<span class="text-black float-end">
		Previous Donations
	</span>
</h4>

<LoadingComponent IsLoading="DonationDetails == null">
	<TableTemplate Items="DonationDetails"
								TableFooterColor="table-primary"
								 HeaderCSS="table table-light table-hover">
		<TableHeader>
			<th>#</th>
			<th class ="text-center">$</th>
			<th>Reference Id / Notes</th>
			<th>Created By</th>

			<th class="text-center">Actions</th>
		</TableHeader>

		<RowTemplate>
			<td>@context.Detail</td>
			<td class="text-center">
				@context.AmountNoCents<br />
			</td>
			<td>
				<small>@context.ReferenceId</small><br />
				<small>@context.Notes</small>
			</td>

			<td>
				@context.CreatedBy <br />  @context.CreateDate.ToString(DateFormat.MM_dd_hh_mm)
			</td>

			<td class="text-center">
				<div class="btn-group">
					<button @onclick="@(() => DeleteHandler(context.Id))" title="Id: @context.Id"
									type="button" class="text-danger btn-sm">
						<i class="fa fa-times"></i>
						<small>Delete</small>
					</button>
				</div>
			</td>

		</RowTemplate>

		<TableFooter>
			<th>Σ</th>
			<th class="text-center">@TotalNoCents</th>
			<th>Total</th>
			<th></th>
			<th></th>
		</TableFooter>


	</TableTemplate>

</LoadingComponent>

@code {
	[Parameter, EditorRequired] public int RegistrationId { get; set; }

	public List<DonationDetailQuery>? DonationDetails { get; set; } = new List<DonationDetailQuery>(); //init;

	private decimal Total { get; set; } = 0;
	private string TotalNoCents { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Logger!.LogDebug(string.Format("Inside {0}; RegistrationId: {1}"
			, nameof(PreviousDonationsTable) + "!" + nameof(OnInitialized), RegistrationId));
		await PopulateTable();
	}

	private async Task DeleteHandler(int id)
	{
		try
		{
			int affectedRows = 0;
			affectedRows = await db!.DeleteDonationDetail(id);
			Toast!.ShowSuccess($"Deleted id: {id}; affectedFows: {affectedRows}");

			//StateHasChanged(); await InvokeAsync(() => StateHasChanged())
			await InvokeAsync(StateHasChanged);
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "...Error reading database");
			Toast!.ShowError("Error reading database");
		}
	}

	//void EditHandler(int id)
	//{
	//	Toast!.ShowInfo($"{nameof(EditHandler)}; id: {id}; ToDo: handle Edit");
	//}


	private async Task PopulateTable()
	{
		try
		{
			DonationDetails = await db!.GetByRegistrationId(RegistrationId);

			if (DonationDetails is null)
			{
				Toast!.ShowWarning($"{nameof(DonationDetailQuery)} NOT FOUND");
			}
			else
			{
				Total = DonationDetails.Select(s => s.Amount).Sum();  // (s => s.Amount ?? 0)
				TotalNoCents = String.Format("{0:C0}", Total);
			}
		}
		catch (Exception ex)
		{
			Logger!.LogError(ex, "...Error reading database");
			Toast!.ShowError("Error reading database");
		}
	}

}