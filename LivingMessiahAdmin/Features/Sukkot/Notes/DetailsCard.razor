@using Microsoft.Extensions.Logging
@using CrudEnums = LivingMessiahAdmin.Features.Sukkot.MasterDetail.Enums.Crud

@inject ILogger<DetailsCard>? Logger
@inject IToastService? Toast
@inject Data.IRepository? db

@if (CurrentNote is not null)
{
  <div class="card text-dark bg-light my-4">
    <div class="card-header">

      <div class="container d-flex justify-content-between">
        <p><b>@CurrentNote.FirstName @CurrentNote.FamilyName</b></p>
        <p>
          <a href="tel:@CurrentNote.Phone" title="@CurrentNote.PhoneNumber">@CurrentNote.PhoneNumber</a>&nbsp;<i class="fa fa-phone"></i>
        </p>
        <p>
          <a href="mailto:@CurrentNote.EMail" title="@CurrentNote.EMail">@CurrentNote.EMail</a>&nbsp;<i class="far fa-envelope"></i>
        </p>
      </div>

    </div>

    @* 
			ToDo: replace this with an EditForm that can update these two fields 
			Use Markdown by implementing MarkDig
		*@
    <div class="row">
      <div class="col-sm-6">

        <div class="card-body">
          <h5 class="card-title">
            <b>Admin Notes</b>
            <button @onclick="() => EditButtonClicked(true)" class="btn-outline-primary btn btn-xs">
              <i class=@CrudEnums.Edit.Icon></i>
            </button>
          </h5>
          <p class="card-text bg-secondary-subtle p-1">@CurrentNote.AdminNotes </p>
        </div>

      </div>
      <div class="col-sm-6">

        <div class="card-body">
          <h5 class="card-title">
            <b>User Notes</b>
            <button @onclick="() => EditButtonClicked(false)" class="btn-outline-primary btn btn-xs">
              <i class=@CrudEnums.Edit.Icon></i>
            </button>
          </h5>
          <p class="card-text bg-secondary-subtle p-1">@CurrentNote.UserNotes </p>
        </div>

      </div>
    </div>

    <div class="d-print-none">
      <div class="card-footer text-center">
        <button @onclick="CloseButtonClicked" class="btn-primary btn btn-sm">
          Close <i class='fas fa-times'></i>
        </button>
      </div>
    </div>

  </div>
}
else
{
  <p class="text-black-50"><small>CurrentNote IS NULL</small></p>
}

@code {
  [Parameter, EditorRequired] public required NotesQuery? SelectedNote { get; set; }
  [Parameter] public EventCallback OnCommandDetailClosed { get; set; }

  protected NotesQuery? CurrentNote { get; set; }

  protected override void OnParametersSet()
  {
    string inside = $"{nameof(DetailsCard)}!{nameof(OnParametersSet)}";
    Logger!.LogDebug(string.Format("Inside {0}", inside));

    if (SelectedNote is not null)
    {
      CurrentNote = SelectedNote; // ToDo is this necessary?

      Logger!.LogDebug(string.Format("...CurrentNote.FirstName: {0}", CurrentNote.FirstName));
    }
    else
    {
      Logger!.LogDebug("{Method} {Message}", nameof(OnParametersSet), "SelectedNote is null");
    }
  }

  void EditButtonClicked(bool isAdmin)
  {
    Toast!.ShowInfo("ToDo: call db to update Note or AdminNotes");
  }

  void CloseButtonClicked()
  {

    OnCommandDetailClosed.InvokeAsync();
  }
}
