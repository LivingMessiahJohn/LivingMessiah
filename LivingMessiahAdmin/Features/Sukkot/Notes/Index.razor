@page "/Sukkot/Notes"

@using LivingMessiahAdmin.Features.Sukkot.Enums
<PageHeaderMenubar MenuBarEnum=MenuBar.Notes ShowPrintButton=true />

@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject Data.IRepository? db

<LoadingComponent IsLoading="data == null" TurnSpinnerOff=TurnSpinnerOff>
  @if (ShowDetail)
  {
    <DetailsEditForm SelectedNote="CurrentNote" OnCommandDetailClosed="ReturnedCommandDetailClose" />
  }
  else
  {
    @* @if (data is not null)  {  } *@
    <div class="row">
      <div class="col-sm-6">
        <Typeahead SelectedNote="CurrentNote"
                   OnNotesQuerySelected="ReturnedNotesQuery"
                   data="data" />
      </div>
      <div class="col-sm-6">
        <FilterButtons Filter="Filter" OnFilterSelected="ReturnedFilter" />
      </div>
    </div>

    <ListCard Filter="Filter" data="data" />
  }
</LoadingComponent>

@code {

  List<NotesQuery>? data = new List<NotesQuery>();

  protected bool TurnSpinnerOff = false;
  protected override async Task OnInitializedAsync()
  {
    try
    {
      //Logger!.LogDebug("{Method}, Filter: {Message}", nameof(OnInitializedAsync), CurrentFilter?.Name);
      await Task.Delay(500); // To allow the spinner to show  
      // ToDo: Note, Filter is always going to be All, because we are in OnInitializedAsync
      data = await db!.GetAdminOrUserNotes(Filter!);
      if (data is null)
      {
        Logger!.LogDebug("{Method} {Message}", nameof(OnInitializedAsync), "data is null");
        Toast!.ShowInfo("No notes to display");
      }
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(OnInitializedAsync));
      Toast!.ShowError($"{Global.ToastShowError}");
    }
    finally
    {
      TurnSpinnerOff = true;
    }
  }


  private bool ShowDetail = false;
  protected NotesQuery? CurrentNote { get; set; }
  // Called by Typeahead
  void ReturnedNotesQuery(NotesQuery notesQuery)
  {
    ShowDetail = true;
    CurrentNote = notesQuery;
    /*
    Logger!.LogDebug("{Method}, {Message}"
    , nameof(ReturnedNotesQuery)
    , $"{notesQuery?.FirstName} {notesQuery?.FamilyName}, Id: {notesQuery?.Id}; ShowDetail: {ShowDetail}");
    */
  }

  private Enums.Filter? Filter = Enums.Filter.All;
  void ReturnedFilter(Enums.Filter filter)
  {
    Filter = filter;
  }

  void ReturnedCommandDetailClose()
  {
    CurrentNote = null;
    ShowDetail = false;
  }

}
