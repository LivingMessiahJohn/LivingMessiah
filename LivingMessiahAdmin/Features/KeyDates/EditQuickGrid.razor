@using LivingMessiahAdmin.Features.KeyDates.Data
@using Microsoft.AspNetCore.Components.QuickGrid

@inject ILogger<EditQuickGrid>? Logger
@inject IToastService? Toast
@inject IRepository? db

<div class="quickgrid-container">
  @if (CalendarEntries != null)
  {
    <QuickGrid Items="@CalendarEntries.AsQueryable()" Class="table table-striped table-hover">
      <PropertyColumn Property="@(c => c.Date)" Title="Date" Format="d" Class="text-center" />
      <PropertyColumn Property="@(c => c.Description)" Title="Description" />
      <TemplateColumn Title="Actions" Class="text-center">
        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => EditItem(context))">
          <i class="fas fa-edit"></i> Edit
        </button>
      </TemplateColumn>
    </QuickGrid>
  }
  else
  {
    <p>Loading calendar entries...</p>
  }
</div>

@if (IsEditing && CurrentEditItem != null)
{
  <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Edit Calendar Entry</h5>
          <button type="button" class="btn-close" @onclick="CancelEdit"></button>
        </div>
        <div class="modal-body">
          <EditForm Model="@CurrentEditItem" OnValidSubmit="@SaveChanges">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
              <label for="date" class="form-label">Date</label>
              <InputDate id="date" class="form-control" @bind-Value="CurrentEditItem.Date" />
              <ValidationMessage For="@(() => CurrentEditItem.Date)" />
            </div>

            <div class="mb-3">
              <label for="description" class="form-label">Description</label>
              <InputText id="description" class="form-control" @bind-Value="CurrentEditItem.Description" readonly />
            </div>

            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </div>
          </EditForm>
        </div>
      </div>
    </div>
  </div>
}

<style>
  .quickgrid-container {
    max-height: 400px;
    overflow-y: auto;
  }

    .quickgrid-container .table th,
    .quickgrid-container .table td {
      vertical-align: middle;
    }

  .modal.fade.show {
    display: block !important;
  }
</style>

@code {
  [Parameter, EditorRequired] public List<CalendarEntryQuery>? ParamCalendarEntries { get; set; }
  [Parameter, EditorRequired] public int Year { get; set; }

  protected List<CalendarEntryQuery>? CalendarEntries;
  protected bool IsEditing = false;
  protected CalendarEntryQuery? CurrentEditItem;
  protected CalendarEntryQuery? OriginalEditItem;

  protected override void OnParametersSet()
  {
    Logger!.LogDebug("{Method} {Message}", nameof(OnParametersSet), $"ParamYear: {Year}");
    CalendarEntries = ParamCalendarEntries;
  }

  private void EditItem(CalendarEntryQuery item)
  {
    Logger!.LogDebug("{Method} {Message}", nameof(EditItem), $"Editing item with Detail: {item.Detail}");

    // Create a copy for editing to avoid modifying the original until save
    CurrentEditItem = new CalendarEntryQuery
    {
      Date = item.Date,
      Detail = item.Detail,
      DateTypeId = item.DateTypeId,
      EnumId = item.EnumId,
      Description = item.Description
    };

    // Keep reference to original for comparison
    OriginalEditItem = item;
    IsEditing = true;
  }

  private void CancelEdit()
  {
    Logger!.LogDebug("{Method}", nameof(CancelEdit));
    IsEditing = false;
    CurrentEditItem = null;
    OriginalEditItem = null;
  }

  private async Task SaveChanges()
  {
    if (CurrentEditItem == null || OriginalEditItem == null)
    {
      Logger!.LogWarning("{Method} {Message}", nameof(SaveChanges), "No item to save");
      return;
    }

    Logger!.LogDebug("{Method} {Message}", nameof(SaveChanges), $"Saving changes for Detail: {CurrentEditItem.Detail}");

    try
    {
      // Check if date has actually changed
      if (CurrentEditItem.Date != OriginalEditItem.Date)
      {
        var rowsUpdated = await db!.UpdateKeyDateCalendar(Year, CurrentEditItem.Detail, CurrentEditItem.Date);

        if (rowsUpdated > 0)
        {
          // Update the original item with the new date
          OriginalEditItem.Date = CurrentEditItem.Date;
          Toast!.ShowInfo($"Calendar entry updated successfully");
        }
        else
        {
          Toast!.ShowWarning("No rows were updated");
        }
      }
      else
      {
        Toast!.ShowInfo("No changes detected");
      }

      // Close the edit modal
      IsEditing = false;
      CurrentEditItem = null;
      OriginalEditItem = null;
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(SaveChanges));
      Toast!.ShowError($"{Global.ToastShowError} | {nameof(SaveChanges)}");
    }
  }
}