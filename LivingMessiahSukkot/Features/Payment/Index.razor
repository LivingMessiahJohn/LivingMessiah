@page "/Payment/{Id:int}"

@using Microsoft.AspNetCore.Components.Authorization

@using LivingMessiahSukkot.Features.Components
@using LivingMessiahSukkot.Features.Data
@using LivingMessiahSukkot.Features.Domain
@using LivingMessiahSukkot.Features.Enums
@using static LivingMessiahSukkot.Constants.Auth0

@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject ISecurityHelper? SecurityHelper
@inject Data.IRepository? db

<PageHeader PageEnum="Nav.Payment" />

<LifeCycleAuthority>
  <OpenContent>
    <div class="d-flex justify-content-center my-2">
      <ReturnToIntroButton />
    </div>

    <AuthorizeView Policy=@Policy.Name>
      <Authorized>
        <LoadingComponent IsLoading="rs == null" TurnSpinnerOff=TurnSpinnerOff>
          @if (IsAuthorized)
          {
            <PaymentSummary RegistrationSummary="@rs" />
            @if (!IsFullyPaid)
            {
              @* ToDo: Maybe redirect to user to the Registration Steps *@          
            }
            else
            {
              @* ToDo: Make a disabled button of the button that's inside "StripeCard" *@
              <p class="fs-3 bg-success text-center text-white mt-5 mx-5">The Sukkot Registration is paid in full</p>
            }
          }
          else
          {
            <p class="fs-3 bg-danger text-center text-white mt-5 mx-5">NOT Authorized to view content</p>
          }
        </LoadingComponent>
      </Authorized>
      <NotAuthorized>
        <p class="fs-5 bg-danger text-center text-white mt-5 mx-5">NOT Authorized</p>
      </NotAuthorized>
    </AuthorizeView>

  </OpenContent>
</LifeCycleAuthority>

@code {
  [Parameter] public int Id { get; set; }

  public RegistrationSummary? rs { get; set; }
  protected bool TurnSpinnerOff = false;
  string? Email;
  protected bool IsAuthorized = false;
  protected bool IsFullyPaid = false;

  protected string RemainingCostFormated = string.Empty;
  protected string Amount = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    Logger!.LogDebug("{Method}, Id: {Id}", nameof(OnInitializedAsync), Id);

    Email = await SecurityHelper!.GetEmail();
    if (String.IsNullOrEmpty(Email))
    {
      DoToastLog("Email is empty");
    }
    else
    {
      await GetById(Id);
    }
  }

  private async Task GetById(int id)
  {
    Logger!.LogDebug("{Method}, {Id}", nameof(GetById), id);

    try
    {
      rs = await db!.GetRegistrationSummary(id);
      if (rs is not null && rs!.Id != 0)
      {
        var (passed, errorMsg, securityOverride) = await SecurityHelper!.DoAuthentication(Email!, rs.EMail ?? "");
        if (passed)
        {
          IsAuthorized = true;
          if (rs!.RemainingCost < 1)
          {
            DoToastLog("The Sukkot Registration is paid in full");
            IsFullyPaid = true;
            return;
          }

          RemainingCostFormated = rs.RemainingCost.ToString("C0");
          Amount = ((int)(rs.RemainingCost * 100)).ToString(); //  rs.RemainingCost.ToString("F2");
          Logger!.LogDebug("{Method}, {Amount}", nameof(GetById), Amount);
        }
        else
        {
          DoToastLog($"Failed DoAuthentication | {errorMsg}");
        }
      }
      else
      {
        Logger!.LogWarning("{Method}, {Message}", nameof(GetById), "db!.GetRegistrationSummary(id) returned a null value or Id is 0");
        Toast!.ShowWarning("rs is null");
      }
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(GetById));
      Toast!.ShowError("An invalid operation occurred, contact your administrator");
    }
    finally
    {
      TurnSpinnerOff = true;
    }
  }

  private void DoToastLog(string message)
  {
    Logger!.LogWarning("{Method} {Message}", nameof(DoToastLog), message);
    Toast!.ShowWarning(message);
  }
}