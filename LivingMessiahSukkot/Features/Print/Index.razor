@page "/Print/{Id:int?}"

@using Microsoft.AspNetCore.Components.Authorization

@using LivingMessiahSukkot.Features.Components
@using LivingMessiahSukkot.Features.Components.RegistrationForm
@using LivingMessiahSukkot.Features.Enums
@using static LivingMessiahSukkot.Constants.Auth0
@using LivingMessiahSukkot.Features.Data

@inject NavigationManager NavigationManager
@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject ISecurityHelper? SecurityHelper
@inject Data.IRepository? db

<PageHeader PageEnum="Nav.Print" />

<LifeCycleAuthority>
  <OpenContent>

    <AuthorizeView Policy=@Policy.Name>
      <Authorized>

        <p class="fs-4 text-danger">ToDo: Remove Toolbar inside Print.Index</p>
        @* <Toolbar /> *@
        
        <LoadingComponent IsLoading="RegistrationQuery == null" TurnSpinnerOff=TurnSpinnerOff>

          @if (IsAuthorized)
          {
            <Details RegistrationQuery="@RegistrationQuery" />
          }
          else
          {
            <p class="fs-3 bg-danger text-center text-white mt-5 mx-5">NOT Authorized to view content</p>
          }
        </LoadingComponent>
      </Authorized>
      <NotAuthorized>
        <p class="fs-5 bg-danger text-center text-white mt-5 mx-5">NOT Authorized</p>
      </NotAuthorized>

    </AuthorizeView>

  </OpenContent>
</LifeCycleAuthority>


@code {
  [Parameter] public int? Id { get; set; } = null;

  protected bool TurnSpinnerOff = false;
  string? Email;
  protected bool IsAuthorized = false;

  public Data.RegistrationQuery? RegistrationQuery { get; set; }

  protected override async Task OnInitializedAsync()
  {
    if (Id is null)
    {
      Toast!.ShowWarning("Id not provided");
      NavigationManager!.NavigateTo($"{Nav.LandingPage.Index}");
      return;
    }

    Logger!.LogDebug("{Method}", nameof(OnInitializedAsync));
    try
    {
      Email = await SecurityHelper!.GetEmail();
      if (string.IsNullOrEmpty(Email))
      {
        DoToastLog("Email is empty");
      }
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(OnInitializedAsync));
      Toast!.ShowError("An invalid operation occurred, contact your administrator");
    }
    finally
    {
      TurnSpinnerOff = true;
    }
  }

  protected override async Task OnParametersSetAsync()
{
  Logger!.LogDebug("{Method} {Id}", nameof(OnParametersSetAsync), Id?.ToString() ?? "null");

  TurnSpinnerOff = false;
  RegistrationQuery = null;

  try
  {
    if (string.IsNullOrEmpty(Email))
    {
      Email = await SecurityHelper!.GetEmail();
      if (string.IsNullOrEmpty(Email))
      {
        DoToastLog("Email is empty");
        return;
      }
    }

    if (!Id.HasValue)
    {
      DoToastLog("Id not provided");
      return;
    }

    RegistrationQuery = await db!.ById(Id.Value);

    if (RegistrationQuery is not null)
    {
      var (passed, errorMsg, securityOverride) = await SecurityHelper!.DoAuthentication(Email!, RegistrationQuery.EMail ?? "");

      if (passed)
      {
        DoPassed();
      }
      else
      {
        DoToastLog($"Failed DoAuthentication | {errorMsg}");
      }
    }
    else
    {
      DoToastLog("Registration Not Found");
    }
  }
  catch (Exception ex)
  {
    Logger!.LogError(ex, "{Method}", nameof(OnParametersSetAsync));
    Toast!.ShowError("An invalid operation occurred, contact your administrator");
  }
  finally
  {
    TurnSpinnerOff = true;
    StateHasChanged();
  }
}

  private void DoToastLog(string message)
  {
    Logger!.LogWarning("{Method} {Message}", nameof(DoToastLog), message);
    Toast!.ShowWarning(message);
  }

  private void DoPassed()
  {
    IsAuthorized = true;
    (DateTime[]? week1, DateTime[]? week2) = FormHelper.GetAttendanceDatesArray(RegistrationQuery!.AttendanceBitwise);
    RegistrationQuery!.AttendanceDateList = week1;
    RegistrationQuery!.AttendanceDateList2ndMonth = week2!;

  }

}
