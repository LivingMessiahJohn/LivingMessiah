@page "/Print/{Id:int}/{showPrintInstructionMessage:bool}"

@using Microsoft.AspNetCore.Components.Authorization

@using LivingMessiahSukkot.Features.Components
@using LivingMessiahSukkot.Features.Enums
@using LivingMessiahSukkot.Features.Enums.Helpers
@using static LivingMessiahSukkot.Constants.Auth0
@using LivingMessiahSukkot.Features.Data

@inject ILogger<Index>? Logger
@inject IToastService? Toast
@inject ISecurityHelper? SecurityHelper
@inject Data.IRepository? db

<PageHeader PageEnum="Nav.Print" />

<LifeCycleAuthority>
  <OpenContent>

    <AuthorizeView Policy=@Policy.Name>
      <Authorized>
        <Toolbar />
        <LoadingComponent IsLoading="RegistrationQuery == null" TurnSpinnerOff=TurnSpinnerOff>

          @if (IsAuthorized)
          {
            <Details RegistrationQuery="@RegistrationQuery" />
          }
          else
          {
            <p class="fs-3 bg-danger text-center text-white mt-5 mx-5">NOT Authorized to view content</p>
          }
        </LoadingComponent>
      </Authorized>
      <NotAuthorized>
        <p class="fs-5 bg-danger text-center text-white mt-5 mx-5">NOT Authorized</p>
      </NotAuthorized>

    </AuthorizeView>

  </OpenContent>
</LifeCycleAuthority>


@code {
  [Parameter, EditorRequired] public int Id { get; set; }
  [Parameter] public bool showPrintInstructionMessage { get; set; } = true;

  protected bool TurnSpinnerOff = false;
  string? Email;
  protected bool IsAuthorized = false;

  public Data.RegistrationQuery? RegistrationQuery { get; set; }

  protected override async Task OnInitializedAsync()
  {
    Logger!.LogDebug("{Method} {Id}", nameof(OnInitializedAsync), Id);
    try
    {
      Email = await SecurityHelper!.GetEmail();
      if (String.IsNullOrEmpty(Email))
      {
        DoToastLog("Email is empty");
      }
      else
      {
        RegistrationQuery = await db!.ById(Id);

        if (RegistrationQuery is not null)
        {
          var (passed, errorMsg, securityOverride) = await SecurityHelper!.DoAuthentication(Email!, RegistrationQuery.EMail ?? "");

          if (passed)
          {
            DoPassed();
          }
          else
          {
            DoToastLog($"Failed DoAuthentication | {errorMsg}");
          }
        }
        else
        {
          DoToastLog("Registration Not Found");
        }
      }
    }
    catch (Exception ex)
    {
      Logger!.LogError(ex, "{Method}", nameof(OnInitializedAsync));
      Toast!.ShowError("An invalid operation occurred, contact your administrator");
    }
    finally
    {
      TurnSpinnerOff = true;
    }
  }

  private void DoToastLog(string message)
  {
    Logger!.LogWarning("{Method} {Message}", nameof(DoToastLog), message);
    Toast!.ShowWarning(message);
  }

  private void DoPassed()
  {
    IsAuthorized = true;
    (DateTime[]? week1, DateTime[]? week2) = EntryFormHelper.GetAttendanceDatesArray(RegistrationQuery!.AttendanceBitwise);
    RegistrationQuery.AttendanceDateList = week1;
    RegistrationQuery.AttendanceDateList2ndMonth = week2!;
  }

}
