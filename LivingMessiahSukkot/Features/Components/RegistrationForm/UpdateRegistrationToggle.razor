@using LivingMessiahSukkot.Features.Enums

@inject ILogger<UpdateRegistrationToggle>? Logger

@* <div class="d-flex justify-content-end"> </div> *@
  @if (IsCollapsed)
  {
    <button @onclick="@(e => ButtonClick(IsCollapsed))"
            class="btn btn-outline-primary btn-sm ms-1">
      Registration Details <i class='fas fa-chevron-down'></i>
    </button>
  }
  else
  {
    <button @onclick="@(e => ButtonClick(IsCollapsed))"
            class="btn btn-outline-primary btn-sm ms-1">
      Hide <i class='fas fa-chevron-up'></i>
      @* Hide Registration Details *@
    </button>
  }

  @if (!IsCollapsed)
  {
    <div class="card mt-1 mb-3">
      <div class="card-body bg-light">
        <Form Email="@Email" Id="@Id" CurrentStep=CurrentStep OnUpdateCompleted="ReturnUpdateCompleted" />
      </div>
    </div>
  }


@code {
  [Parameter, EditorRequired] public int Id { get; set; }
  [Parameter, EditorRequired] public string? Email { get; set; }
  [Parameter, EditorRequired] public Step? CurrentStep { get; set; }
  //[Parameter, EditorRequired] public int Adults { get; set; }
  [Parameter] public EventCallback<int> OnUpdateCompleted { get; set; }

  public bool IsCollapsed { get; set; } = true;
  protected void ButtonClick(bool isCollapsed)
  {
    IsCollapsed = !isCollapsed;
  }

  private void ReturnUpdateCompleted(int adults)
  {
    Logger!.LogDebug("{Method} {Message}", nameof(ReturnUpdateCompleted), $"pass through adults: {adults}");
    if (!IsCollapsed) { IsCollapsed = true; }
    OnUpdateCompleted.InvokeAsync(adults);
  }
}
